<?xml version="1.0" encoding="utf-8"?>
<!--
/*****************************************************
*  
*  Copyright 2009 Akamai Technologies, Inc.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Akamai Technologies, Inc.
*  Portions created by Akamai Technologies, Inc. are Copyright (C) 2009 Akamai 
*  Technologies, Inc. All Rights Reserved. 
*  
*****************************************************/
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:players="com.adobe.strobe.players.*" applicationComplete="initApp()"
	backgroundColor="#000000">

	<mx:Style source="DynamicStreamingSample.css" />
	<mx:Script>
		<![CDATA[
			import org.openvideoplayer.traits.IViewable;
			import mx.events.StateChangeEvent;
			import mx.controls.sliderClasses.Slider;
			import mx.events.DropdownEvent;		
			import mx.events.SliderEvent;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			
			import flash.utils.getDefinitionByName;
			import flash.net.getClassByAlias;

			import org.openvideoplayer.parsers.SMILParser;
			import org.openvideoplayer.plugin.PluginClassResource;

			import org.openvideoplayer.traits.MediaTraitType;
			import org.openvideoplayer.traits.LoadState;
			import org.openvideoplayer.traits.ILoadable;
			import org.openvideoplayer.traits.MediaTraitType;			
			import org.openvideoplayer.traits.ISpatial;
			import org.openvideoplayer.traits.ISwitchable;

			import org.openvideoplayer.events.*;

			import org.openvideoplayer.media.MediaInfo;
			import org.openvideoplayer.media.MediaElement;
			import org.openvideoplayer.media.IMediaResource;
			import org.openvideoplayer.media.URLResource;			
			import org.openvideoplayer.media.IURLResource;

			import org.openvideoplayer.video.VideoElement;
			
			import org.openvideoplayer.utils.*;
			
			import org.openvideoplayer.net.dynamicstreaming.DynamicStreamingNetLoader;
			import org.openvideoplayer.net.dynamicstreaming.DynamicStreamingResource;
			
			private var sliderDragging:Boolean;
			private var waitForSeek:Boolean;
			private var currentDebugLineNo:int;
			
			private static const DEFAULT_PROGRESS_DELAY:uint = 100;
			private static const MAX_VIDEO_WIDTH:int = 640;
			private static const MAX_VIDEO_HEIGHT:int = 360;		

			// ------ TEST CONTENT ------
			// SMIL
			private static const SMIL_TEST1:String 		= "http://mediapm.edgesuite.net/ovp/content/demo/smil/elephants_dream.smil";
			private static const SMIL_TEST2:String		= "http://www.streamflashhd.com/video/train.smil";
			// NON-DYNAMIC PROGRESSIVE
			private static const PROGRESSIVE_FLV:String = "http://mediapm.edgesuite.net/strobe/content/test/AFaerysTale_sylviaApostol_640_500_short.flv";
			// NON-DYNAMIC STREAMING
			private static const STREAMING_F4V:String	= "rtmp://cp67126.edgefcs.net/ondemand/mp4:mediapm/osmf/content/test/sample1_700kbps.f4v";
			
				
			[Bindable]
			private var smilFiles:Array = [ SMIL_TEST1, SMIL_TEST2, PROGRESSIVE_FLV, STREAMING_F4V ];
			
			private var _smilParser:SMILParser;
			
			[Bindable]
			private var _smilFileLoadState:String = "Not Loaded";
			
			[Bindable]
			private var _switchable:ISwitchable;
			
			[Bindable]
			private var _isAutoSwitchable:Boolean = true;
			
			[Bindable]
			private var _autoswitchBtnLabel:String = "Manual";
			
			private var _viewable:IViewable;
			private var _video:Video;
			
			private var _savedWidth:Number;
			private var _savedHeight:Number;
			private var _savedSmoothing:Boolean;
			private var _savedDeblocking:int;			
			private var _videoHolder:UIComponent;
			
			private function initApp():void
			{
				wrapper.mediaPlayer.addEventListener(DimensionChangeEvent.DIMENSION_CHANGE, onDimensionChange);		
				wrapper.mediaPlayer.addEventListener(DurationChangeEvent.DURATION_CHANGE, onDurationChange);	
				wrapper.mediaPlayer.addEventListener(PlayheadChangeEvent.PLAYHEAD_CHANGE, onPlayheadChange);
				wrapper.mediaPlayer.addEventListener(SeekingChangeEvent.SEEKING_CHANGE, onSeekingChange);
				wrapper.mediaPlayer.addEventListener(PlayingChangeEvent.PLAYING_CHANGE, onPlayingChange );
				wrapper.mediaPlayer.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, onMediaWrapperStateChange);		
				
				wrapper.mediaPlayer.playheadUpdateInterval = DEFAULT_PROGRESS_DELAY;
								
				sliderDragging = false;
				waitForSeek = false;
				clearDebugText();
			}
			
			private function onLoadableStateChange(event:LoadableStateChangeEvent):void
			{
				debug("onLoadableStateChange() - newState="+event.newState+", oldState="+event.oldState);
				switch (event.newState)
				{
					case LoadState.LOADED:
						_smilFileLoadState = "Loaded";
						_switchable = wrapper.element.getTrait(MediaTraitType.SWITCHABLE) as ISwitchable;

						if (_switchable != null)
						{
							_switchable.addEventListener(SwitchingChangeEvent.SWITCHING_CHANGE, onSwitchingChange);
						}
						
						_viewable = wrapper.element.getTrait(MediaTraitType.VIEWABLE) as IViewable;
						_video = _viewable.view as Video;
						_video.smoothing = false;
						_video.deblocking = 0;
						
						updateSwitchingControls();
						break;					
					case LoadState.LOAD_FAILED:
						_smilFileLoadState = "Load FAILED";
						break;
					case LoadState.CONSTRUCTED:
						if (event.oldState == LoadState.UNLOADING)
						{
							_smilFileLoadState = "Not Loaded";
						}
						else
						{
							_smilFileLoadState = "Constructed";
						}
						break;
					case LoadState.UNLOADING:
						_smilFileLoadState = "Unloading";
						break;
				}
			}
			
			private function onSwitchingChange(event:SwitchingChangeEvent):void
			{
				var msg:String = "Switching change "
				var showCurrentIndex:Boolean = false;
				
				switch(event.newState)
				{
					case SwitchingChangeEvent.SWITCHSTATE_COMPLETE:
						msg += "COMPLETE";
						showCurrentIndex = true;
						break;
					case SwitchingChangeEvent.SWITCHSTATE_FAILED:
						msg += "FAILED";
						break;
					case SwitchingChangeEvent.SWITCHSTATE_REQUESTED:
						msg += "REQUESTED";
						break;

				}
				
				if (event.detail != null)
				{
					msg += ", " + event.detail.description + ". " + event.detail.moreInfo;
				}
				
				debug(msg);
				
				if (showCurrentIndex)
				{
					var streamMsg:String = "Current streaming profile index: " + _switchable.currentIndex + " of " + _switchable.maxIndex;
					debug(streamMsg);
					
					streamMsg = "Current bitrate = " + this._smilParser.dynamicStreamingResource.getItemAt(_switchable.currentIndex).bitrate + "kbps";
					debug(streamMsg);
				}
				
				updateSwitchingControls();
			}
			
			private function updateSwitchingControls():void
			{				
				// Disable if a switch is pending or the video is not switchable
				if (_switchable == null || _switchable.switchUnderway)
				{
					autoSwitchBtn.enabled = false;
					switchUpBtn.enabled = false;
					switchDownBtn.enabled = false;
				}
				else if (!_switchable.autoSwitch)
				{
					autoSwitchBtn.enabled = true;
					switchUpBtn.enabled = (_switchable.currentIndex == _switchable.maxIndex) ? false : true;
					switchDownBtn.enabled = (_switchable.currentIndex == 0) ? false : true;
				}
				else
				{
					autoSwitchBtn.enabled = true;
					switchUpBtn.enabled = false;
					switchDownBtn.enabled = false;
				}
			}
			
			private function debug(...args):void
			{
				var lineNo:int = currentDebugLineNo++;
				taDebug.text += lineNo + ":" + args + "\n";
				callLater(autoScroll);
			}

			private function autoScroll():void 
			{
				taDebug.verticalScrollPosition = taDebug.maxVerticalScrollPosition;
			}

			private function onMediaWrapperStateChange(event:StateChangeEvent):void
			{
				trace(">>>onMediaWrapperStateChange: newState=" + event.newState + " oldState=" + event.oldState);
			}
						
			private function createDynamicStreamingElement(res:IMediaResource):void
			{	
				clearDebugText();
								
				var mediaElement:VideoElement = new VideoElement(new DynamicStreamingNetLoader(), res);
				mediaElement.addEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError);
				
				var loadable:ILoadable = mediaElement.getTrait(MediaTraitType.LOADABLE) as ILoadable;
				loadable.addEventListener(LoadableStateChangeEvent.LOADABLE_STATE_CHANGE, onLoadableStateChange);
									
				wrapper.element = mediaElement;
				wrapper.mediaPlayer.autoPlay = true;
			}
			
			private function clearDebugText():void
			{
				taDebug.text = "";
				currentDebugLineNo = 0;			
			}
			
			private function clear(eraseDebugTxt:Boolean=true):void
			{
				if (eraseDebugTxt)
				{
					clearDebugText();
				}
				wrapper.width = 640;
				wrapper.height = 360;
			}
			
			private function unload():void
			{
				var mediaElement:MediaElement = wrapper.element;
				if (mediaElement != null && mediaElement.hasTrait(MediaTraitType.LOADABLE))
				{
					var loadable:ILoadable = mediaElement.getTrait(MediaTraitType.LOADABLE) as ILoadable;
					trace("loadable.loadState="+loadable.loadState);
					if (loadable.loadState == LoadState.LOADED)
					{
						loadable.unload();
					}
				}
				clear(false);
			}			
			
			
			private function loadSMIL():void
			{
				clear();
				
				var smilURL:String = cbMediaURL.text as String;
				
				if (smilURL.search(/\.smil$/i) == -1)
				{
					// This sample player can handle "regular" content as well
					this.createDynamicStreamingElement(new URLResource(new FMSURL(smilURL)));
					return;
				}
				_smilParser = new SMILParser();
				
				_smilParser.addEventListener(SMILParser.PARSED, onSMILParsed, false, 0, true);
				_smilParser.addEventListener(SMILParser.ERROR, onSMILParseError, false, 0, true);
				_smilParser.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSMILSecurityError, false, 0, true);
				_smilParser.addEventListener(SMILParser.BUSY, onSMILParserBusy, false, 0, true);
				
				_smilParser.load(smilURL);		
			}
			
			private function onSMILParsed(e:Event):void
			{
				var dynamicStreamingResource:DynamicStreamingResource = _smilParser.dynamicStreamingResource;
				this.createDynamicStreamingElement(dynamicStreamingResource);
				
			}
			
			private function onSMILParseError(e:IOErrorEvent):void
			{
				Alert.show("SMIL parsing error: " + e.toString());
			}
			
			private function onSMILSecurityError(e:SecurityErrorEvent):void
			{
				Alert.show("SMIL parsing security error: " + e.toString());
			}
			
			private function onSMILParserBusy(e:Event):void
			{
				Alert.show("SMIL parser is currently busy, pleast wait and try again.");	
			}
			
			private function onDimensionChange(event:DimensionChangeEvent):void 
			{
				if (stage.displayState == StageDisplayState.FULL_SCREEN)
				{
					_video.smoothing = true;
					return;
				}
				
				var width:int = event.newWidth;
				var height:int = event.newHeight;
				
				trace(">>> width = "+width+", height="+height);
				
				// Scale to native or smaller
				if (width > MAX_VIDEO_WIDTH || height > MAX_VIDEO_HEIGHT)
				{
					if ((width/height) >= (MAX_VIDEO_WIDTH/MAX_VIDEO_HEIGHT))
					{
						wrapper.width = MAX_VIDEO_WIDTH;
						wrapper.height = MAX_VIDEO_WIDTH * (height/width);
					}
					else
					{
						wrapper.width = MAX_VIDEO_HEIGHT * (width/height);
						wrapper.height = MAX_VIDEO_HEIGHT;
					}
				}
				else
				{
					wrapper.width = event.newWidth;
					wrapper.height = event.newHeight;			
				}
				
				trace(">>> wrapper.width was set to "+wrapper.width+", wrapper.height was set to "+wrapper.height);
			}
			
			private function onDurationChange(event:DurationChangeEvent):void
			{
				seekBar.maximum = event.newDuration;
				lblDuration.text = timeCode(event.newDuration);
				seekBar.enabled = seekBar.visible = wrapper.mediaPlayer.seekable;
				
			}
						
			private function onPlayheadChange(event:PlayheadChangeEvent):void
			{
				if (wrapper.mediaPlayer.temporal && !sliderDragging && !waitForSeek) {
					seekBar.value = event.newPosition;
					lblPlayhead.text = timeCode(event.newPosition);
				}
			}
			
			private function onSeekingChange(event:SeekingChangeEvent):void
			{
				if (!event.seeking)
				{
					waitForSeek = false;
					updateSwitchingControls();
				}
			}

   			private function toggleDragging(state:Boolean):void {
   				sliderDragging = state;
   				if (!state) {
   					waitForSeek = true;
   					if (wrapper.mediaPlayer.seekable)
   					{
   						wrapper.mediaPlayer.seek(seekBar.value); 
   					}
   				}
   			}
   			
   			private function onPlayingChange(event:PlayingChangeEvent):void
   			{
   				if (event.playing)
   				{
   					trace("onPlayingChange - event.playing = "+event.playing);
   				}
   			}
   			
   			private function onMediaError(event:MediaErrorEvent):void
   			{
   				if (taDebug.text.length)
   				{
   					taDebug.text += "\n";
   				}
   				taDebug.text += taDebug.text + "error code="+event.error.errorCode+" description="+event.error.description;
   			}
   			
			private function timeCode(sec:Number):String 
			{
				var h:Number = Math.floor(sec/3600);
				h = isNaN(h) ? 0 : h;
				
				var m:Number = Math.floor((sec%3600)/60);
				m = isNaN(m) ? 0 : m;
				
				var s:Number = Math.floor((sec%3600)%60);
				s = isNaN(s) ? 0 : s;
				
				return (h == 0 ? "":(h<10 ? "0"+h.toString()+":" : h.toString()+":"))+(m<10 ? "0"+m.toString() : m.toString())+":"+(s<10 ? "0"+s.toString() : s.toString());
			}
   			
			private function onSwitchUp():void
			{
				if (_switchable && !_switchable.autoSwitch && !_switchable.switchUnderway)
				{
					var max:int = _switchable.maxIndex;
					if (_switchable.currentIndex < max)
					{
						_switchable.switchTo(_switchable.currentIndex + 1);
					}
				}
				
			}
			
			private function onSwitchDown():void
			{
				if (_switchable && !_switchable.autoSwitch && !_switchable.switchUnderway)
				{
					if (_switchable.currentIndex > 0)
					{
						_switchable.switchTo(_switchable.currentIndex - 1);
					}
				}				
			}
			
			private function onAutoSwitchable():void
			{
				if (_switchable)
				{
					this._isAutoSwitchable = !this._isAutoSwitchable;
					_switchable.autoSwitch = this._isAutoSwitchable; 
					debug("Setting auto switch mode to "+ this._isAutoSwitchable);
					
					_autoswitchBtnLabel = (_isAutoSwitchable ? "Manual" : "Auto");
					updateSwitchingControls();
				}
			}
			
			private function onClickPlayBtn():void
			{
				if (wrapper.mediaPlayer.playing && wrapper.mediaPlayer.pausable)
				{
					playBtn.label = "Play";
					wrapper.mediaPlayer.pause();
				}
				else if (wrapper.mediaPlayer.paused && wrapper.mediaPlayer.playable)
				{
					playBtn.label = "Pause";
					wrapper.mediaPlayer.play();
				}
			}
			
			private function onFullScreen():void
			{
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				
				// Hide some controls
				showControls(false);
				
				// When going out of full screen mode we'll use these values
				_savedWidth = _video.width;
				_savedHeight = _video.height;
				_savedSmoothing = _video.smoothing;
				_savedDeblocking = _video.deblocking;
				
				// If we're not playing the highest quality stream, turn smoothing on
				_video.smoothing = (_switchable.currentIndex < _switchable.maxIndex) ? true : false;
				
				// In order to maximize hardware scaling we need to set the video object 
				// to the original size of the stream
				_video.width = _video.videoWidth;
				_video.height = _video.videoHeight;
				
				_video.deblocking = 0;

			    wrapperContainer.removeChild(wrapper);
			    _videoHolder = new UIComponent();
			    _videoHolder.addChild(_video);
			    addChild(_videoHolder);
				
				var rect:Rectangle = _video.getBounds(stage);
				stage.fullScreenSourceRect = rect;
				
				stage.displayState = StageDisplayState.FULL_SCREEN;

			}
			
			public function fullScreenHandler(e:FullScreenEvent):void
			{
				if (stage.displayState == StageDisplayState.NORMAL)
				{
					stage.removeEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
					stage.fullScreenSourceRect = null;
					_video.width = _savedWidth;
					_video.height = _savedHeight;
					_video.smoothing = _savedSmoothing;
					_video.deblocking = _savedDeblocking;
					
					_videoHolder.removeChild(_video);
					removeChild(_videoHolder);
					_videoHolder = null;
					wrapperContainer.addChild(wrapper);

					showControls();
				}
			}
			
			private function showControls(show:Boolean=true):void
			{
				mainContainer.visible = mainContainer.includeInLayout = show;
			}
		]]>
	</mx:Script>


	<mx:VBox id="mainContainer" height="100%" width="100%" paddingLeft="10" paddingTop="10">
		<mx:Label text="OSMF Dynamic Streaming Test App" styleName="title" width="100%" textAlign="left" paddingLeft="20"/>
		<mx:Spacer height="20" />
		<mx:HBox id="inputContainer" height="60">
			<mx:Spacer width="10" />
			<mx:ComboBox id="cbMediaURL" editable="true" dataProvider="{this.smilFiles}" />
			<mx:Button label="Load" click="{loadSMIL()}"/>
			<mx:Button label="Unload" click="{unload()}"/>
			<mx:Label text="{_smilFileLoadState}"/>
		</mx:HBox>	

		<mx:Spacer height="5" />
		<mx:HBox>
			<mx:VBox id="videoContainer" paddingLeft="20">
				<mx:Spacer width="10" />
				<mx:Canvas id="wrapperContainer">
				    <players:MediaPlayerWrapper id="wrapper" width="640" height="360"  />				
				</mx:Canvas>
			    <mx:VBox id="controlsContainer">
		    		<mx:HSlider id="seekBar" width="100%" thumbPress="toggleDragging(true)" thumbRelease="toggleDragging(false)" />
		    		<mx:HBox horizontalAlign="right" width="100%">
	    				<mx:Label text="Position: " />
						<mx:Label id="lblPlayhead" width="100" styleName="timeCode" />
						<mx:Label text="Duration: " />
		    			<mx:Label id="lblDuration" width="100" styleName="timeCode" />			
						<mx:Button id="playBtn" label="Pause" click="onClickPlayBtn()" enabled="{wrapper.mediaPlayer.playable}" />
						<mx:Button id="autoSwitchBtn" label="{_autoswitchBtnLabel}" click="onAutoSwitchable()" enabled="{_switchable!=null}" />
						<mx:Button id="switchUpBtn" label="+" click="onSwitchUp()" enabled="false" />
						<mx:Button id="switchDownBtn" label="-" click="onSwitchDown()" enabled="false" />
						<mx:Button id="fullScreenBtn" label="Full Screen" click="onFullScreen()" visible="false" includeInLayout="false" enabled="{wrapper.mediaPlayer.playable}" />
	    			</mx:HBox>
				</mx:VBox>	    						
			</mx:VBox>
			<mx:Spacer width="20" />
			<mx:VBox id="debugContainer">
				<mx:TextArea id="taDebug" wordWrap="false" editable="false" width="640" height="360"/>
			</mx:VBox>			
		</mx:HBox>
	</mx:VBox>
</mx:Application>
