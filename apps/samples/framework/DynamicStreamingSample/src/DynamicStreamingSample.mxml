<?xml version="1.0" encoding="utf-8"?>
<!--
/*****************************************************
*  
*  Copyright 2009 Akamai Technologies, Inc.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Akamai Technologies, Inc.
*  Portions created by Akamai Technologies, Inc. are Copyright (C) 2009 Akamai 
*  Technologies, Inc. All Rights Reserved. 
*  
*****************************************************/
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:samples="org.osmf.samples.*" applicationComplete="initApp()"
	backgroundColor="#000000">

	<mx:Style source="DynamicStreamingSample.css" />
	<mx:Script>
		<![CDATA[
			import org.osmf.media.DefaultMediaFactory;
			import org.osmf.net.NetLoader;
			import org.osmf.plugin.PluginInfoResource;
			import org.osmf.media.MediaFactory;
			import org.osmf.plugin.PluginManager;
			import mx.events.StateChangeEvent;
			import mx.controls.sliderClasses.Slider;
			import mx.events.DropdownEvent;		
			import mx.events.SliderEvent;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			
			import org.osmf.traits.MediaTraitType;
			import org.osmf.traits.LoadState;
			import org.osmf.traits.LoadTrait;
			import org.osmf.traits.MediaTraitType;			
			import org.osmf.traits.DynamicStreamTrait;
			import org.osmf.traits.DisplayObjectTrait;

			import org.osmf.events.*;

			import org.osmf.media.MediaFactoryItem;
			import org.osmf.media.MediaElement;
			import org.osmf.media.MediaResourceBase;
			import org.osmf.media.URLResource;			

			import org.osmf.elements.VideoElement;
			
			import org.osmf.utils.*;
			
			import org.osmf.net.dynamicstreaming.DynamicStreamingNetLoader;
			import org.osmf.net.dynamicstreaming.DynamicStreamingResource;
			
			// Force the inclusion of the PluginInfo class so we can 
			// load the plugin statically
			import org.osmf.smil.SMILPluginInfo;
			private static const forceReference:SMILPluginInfo = null;
			
			
			private var sliderDragging:Boolean;
			private var waitForSeek:Boolean;
			private var currentDebugLineNo:int;
			
			private static const DEFAULT_PROGRESS_DELAY:uint = 100;
			private static const MAX_VIDEO_WIDTH:int = 640;
			private static const MAX_VIDEO_HEIGHT:int = 360;
			private static const MEDIA_PLAYER_UNLOADED_ALPHA:Number = .11;	

			// ------ TEST CONTENT ------
			// SMIL
			private static const SMIL_TEST1:String 		= "http://mediapm.edgesuite.net/ovp/content/demo/smil/elephants_dream.smil";
			private static const SMIL_TEST2:String		= "http://www.streamflashhd.com/video/train.smil";
			// NON-DYNAMIC PROGRESSIVE
			private static const PROGRESSIVE_FLV:String = "http://mediapm.edgesuite.net/strobe/content/test/AFaerysTale_sylviaApostol_640_500_short.flv";
			// NON-DYNAMIC STREAMING
			private static const STREAMING_F4V:String	= "rtmp://cp67126.edgefcs.net/ondemand/mp4:mediapm/osmf/content/test/sample1_700kbps.f4v";
			
				
			[Bindable]
			private var smilFiles:Array = [ SMIL_TEST1, SMIL_TEST2, PROGRESSIVE_FLV, STREAMING_F4V ];
			
			[Bindable]
			private var _mediaFileLoadState:String = "Not Loaded";
			
			[Bindable]
			private var _dsTrait:DynamicStreamTrait;
			
			[Bindable]
			private var _isAutoSwitchable:Boolean = true;
			
			[Bindable]
			private var _autoSwitchBtnLabel:String = "Manual";
			
			private var _displayObjectTrait:DisplayObjectTrait;
			private var pluginManager:PluginManager;
			private var mediaFactory:DefaultMediaFactory;
			private var mediaElement:MediaElement;
						
			private function initApp():void
			{
				mediaFactory = new DefaultMediaFactory();
				pluginManager = new PluginManager(mediaFactory);
				
				mediaPlayerWrapper.mediaPlayer.addEventListener(DisplayObjectEvent.MEDIA_SIZE_CHANGE, onMediaSizeChange);		
				mediaPlayerWrapper.mediaPlayer.addEventListener(TimeEvent.DURATION_CHANGE, onDurationChange);	
				mediaPlayerWrapper.mediaPlayer.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, onCurrentTimeChange);
				mediaPlayerWrapper.mediaPlayer.addEventListener(SeekEvent.SEEK_BEGIN, onSeekingChange);
				mediaPlayerWrapper.mediaPlayer.addEventListener(SeekEvent.SEEK_END, onSeekingChange);
				mediaPlayerWrapper.mediaPlayer.addEventListener(MediaPlayerCapabilityChangeEvent.CAN_PLAY_CHANGE, onPlayingChange);
				
				mediaPlayerWrapper.mediaPlayer.currentTimeUpdateInterval = DEFAULT_PROGRESS_DELAY;
								
				sliderDragging = false;
				waitForSeek = false;
				clearDebugText();
				
				loadPlugin("org.osmf.smil.SMILPluginInfo");
			}
			
			private function loadMedia(url:String):void
			{
				clear();
				
				var resource:URLResource = new URLResource(new FMSURL(url));

				mediaElement = mediaFactory.createMediaElement(resource);

				mediaElement.addEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError, false, 0, true);
				mediaElement.addEventListener(MediaElementEvent.TRAIT_ADD, onTraitAdd);
				
				var loadTrait:LoadTrait = mediaElement.getTrait(MediaTraitType.LOAD) as LoadTrait;
				loadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
								
				mediaPlayerWrapper.element = mediaElement;
				mediaPlayerWrapper.alpha = 1.0;
			}
			
			private function loadPlugin(source:String):void
			{
				var pluginResource:MediaResourceBase;

				if (source.substr(0, 4) == "http" || source.substr(0, 4) == "file")
				{
					// This is a URL, create a URLResource
					pluginResource = new URLResource(new URL(source));
				}
				else
				{
					// Assume this is a class
					var pluginInfoRef:Class = flash.utils.getDefinitionByName(source) as Class;
					pluginResource = new PluginInfoResource(new pluginInfoRef);
				}
				
				loadPluginFromResource(pluginResource);
			}
			
			private function loadPluginFromResource(pluginResource:MediaResourceBase):void
			{
				pluginManager.addEventListener(PluginManagerEvent.PLUGIN_LOAD, onPluginLoaded);
				pluginManager.addEventListener(PluginManagerEvent.PLUGIN_LOAD_ERROR, onPluginLoadFailed);
				pluginManager.loadPlugin(pluginResource);
			}
			
			private function onPluginLoaded(event:PluginManagerEvent):void
			{
				trace("Plugin LOADED!"); 
			}

			private function onPluginLoadFailed(event:PluginManagerEvent):void
			{
				trace("Plugin LOAD FAILED!");
			}
			
			
			private function onPlayingChange(event:MediaPlayerCapabilityChangeEvent):void
			{
				if (event.type == MediaPlayerCapabilityChangeEvent.CAN_PLAY_CHANGE)
				{
					enableControls(event.enabled);
				}	
			}
			
			private function enableControls(enable:Boolean):void
			{
				seekBar.enabled = playBtn.enabled = autoSwitchBtn.enabled = 
					switchDownBtn.enabled = switchUpBtn.enabled = enable;
			}
			
   			private function onTraitAdd(event:MediaElementEvent):void
   			{
   				switch (event.traitType)
   				{
   					case MediaTraitType.DYNAMIC_STREAM:
						_dsTrait = mediaPlayerWrapper.element.getTrait(MediaTraitType.DYNAMIC_STREAM) as DynamicStreamTrait;

						if (_dsTrait != null)
						{
							_dsTrait.addEventListener(DynamicStreamEvent.SWITCHING_CHANGE, onSwitchingChange);
							updateSwitchingControls();
						}
   						break;
   					case MediaTraitType.DISPLAY_OBJECT:
						_displayObjectTrait = mediaPlayerWrapper.element.getTrait(MediaTraitType.DISPLAY_OBJECT) as DisplayObjectTrait;						
   						break;
   				}	
   			}

			private function onLoadStateChange(event:LoadEvent):void
			{
				debug("onLoadStateChange() - loadState="+event.loadState);

				switch (event.loadState)
				{
					case LoadState.READY:
						_mediaFileLoadState = "Ready";
						break;					
					case LoadState.LOAD_ERROR:
						_mediaFileLoadState = "Load Error";
						break;
					case LoadState.UNINITIALIZED:
						_mediaFileLoadState = "Not Loaded";
						break;
					case LoadState.UNLOADING:
						_mediaFileLoadState = "Unloading";
						break;
				}
			}
			
			private function onSwitchingChange(event:DynamicStreamEvent):void
			{
				var msg:String = "Switching change "
				var showCurrentIndex:Boolean = false;
				
				if (event.switching)
				{
					msg += "REQUESTED";
				}
				else
				{
					msg += "COMPLETE";
					showCurrentIndex = true;
				}
				
				if (event.reason != null)
				{
					msg += ", " + event.reason;
				}
				
				debug(msg);
				
				if (showCurrentIndex)
				{
					var streamMsg:String = "Current streaming profile index: " + _dsTrait.currentIndex + " of " + _dsTrait.maxAllowedIndex;
					debug(streamMsg);
					
					streamMsg = "Current bitrate = " + _dsTrait.getBitrateForIndex(_dsTrait.currentIndex) + "kbps";
					debug(streamMsg);
				}
				
				updateSwitchingControls();
			}
			
			private function updateSwitchingControls():void
			{				
				// Disable if a switch is pending or the video is not switchable
				if (_dsTrait == null || _dsTrait.switching)
				{
					autoSwitchBtn.enabled = false;
					switchUpBtn.enabled = false;
					switchDownBtn.enabled = false;
				}
				else if (!_dsTrait.autoSwitch)
				{
					autoSwitchBtn.enabled = true;
					switchUpBtn.enabled = (_dsTrait.currentIndex == _dsTrait.maxAllowedIndex) ? false : true;
					switchDownBtn.enabled = (_dsTrait.currentIndex == 0) ? false : true;
				}
				else
				{
					autoSwitchBtn.enabled = true;
					switchUpBtn.enabled = false;
					switchDownBtn.enabled = false;
				}
			}
			
			private function debug(...args):void
			{
				var lineNo:int = currentDebugLineNo++;
				taDebug.text += lineNo + ":" + args + "\n";
				callLater(autoScroll);
			}

			private function autoScroll():void 
			{
				taDebug.verticalScrollPosition = taDebug.maxVerticalScrollPosition;
			}

			private function clearDebugText():void
			{
				taDebug.text = "";
				currentDebugLineNo = 0;			
			}
			
			private function clear(eraseDebugTxt:Boolean=true):void
			{
				if (eraseDebugTxt)
				{
					clearDebugText();
				}
				mediaPlayerWrapper.width = MAX_VIDEO_WIDTH;
				mediaPlayerWrapper.height = MAX_VIDEO_HEIGHT;
			}
			
			private function unload():void
			{
				var loadTrait:LoadTrait = mediaElement.getTrait(MediaTraitType.LOAD) as LoadTrait;
				loadTrait.addEventListener(LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
				
				if (loadTrait && (loadTrait.loadState == LoadState.READY))
				{
					loadTrait.unload();
				}
				mediaPlayerWrapper.alpha = MEDIA_PLAYER_UNLOADED_ALPHA;
				clear(false);
			}			
			
			private function onMediaSizeChange(event:DisplayObjectEvent):void 
			{
				var width:int = event.newWidth;
				var height:int = event.newHeight;
				
				// Scale to native or smaller
				if (width > MAX_VIDEO_WIDTH || height > MAX_VIDEO_HEIGHT)
				{
					if ((width/height) >= (MAX_VIDEO_WIDTH/MAX_VIDEO_HEIGHT))
					{
						mediaPlayerWrapper.width = MAX_VIDEO_WIDTH;
						mediaPlayerWrapper.height = MAX_VIDEO_WIDTH * (height/width);
					}
					else
					{
						mediaPlayerWrapper.width = MAX_VIDEO_HEIGHT * (width/height);
						mediaPlayerWrapper.height = MAX_VIDEO_HEIGHT;
					}
				}
				else if (width > 0 && height > 0)
				{
					mediaPlayerWrapper.width = event.newWidth;
					mediaPlayerWrapper.height = event.newHeight;			
				}
			}
			
			private function onDurationChange(event:TimeEvent):void
			{
				seekBar.maximum = event.time;
				lblDuration.text = timeCode(event.time);
				seekBar.enabled = seekBar.visible = mediaPlayerWrapper.mediaPlayer.canSeek;
			}
						
			private function onCurrentTimeChange(event:TimeEvent):void
			{
				if (mediaPlayerWrapper.mediaPlayer.temporal && !sliderDragging && !waitForSeek)
				{
					seekBar.value = event.time;
					lblPlayhead.text = timeCode(event.time);
				}
			}
			
			private function onSeekingChange(event:SeekEvent):void
			{
				if (event.type == SeekEvent.SEEK_END)
				{
					waitForSeek = false;
					updateSwitchingControls();
				}
			}

   			private function toggleDragging(state:Boolean):void
   			{
   				sliderDragging = state;
   				if (!state)
   				{
   					waitForSeek = true;
   					if (mediaPlayerWrapper.mediaPlayer.canSeek)
   					{
   						mediaPlayerWrapper.mediaPlayer.seek(seekBar.value); 
   					}
   				}
   			}
   			   			
   			private function onMediaError(event:MediaErrorEvent):void
   			{
   				if (taDebug.text.length)
   				{
   					taDebug.text += "\n";
   				}
   				taDebug.text += taDebug.text + "error ID="+event.error.errorID+" message="+event.error.message;
   			}
   			
			private function timeCode(sec:Number):String 
			{
				var h:Number = Math.floor(sec/3600);
				h = isNaN(h) ? 0 : h;
				
				var m:Number = Math.floor((sec%3600)/60);
				m = isNaN(m) ? 0 : m;
				
				var s:Number = Math.floor((sec%3600)%60);
				s = isNaN(s) ? 0 : s;
				
				return (h == 0 ? "":(h<10 ? "0"+h.toString()+":" : h.toString()+":"))+(m<10 ? "0"+m.toString() : m.toString())+":"+(s<10 ? "0"+s.toString() : s.toString());
			}
   			
			private function onSwitchUp():void
			{
				if (_dsTrait && !_dsTrait.autoSwitch && !_dsTrait.switching)
				{
					var max:int = _dsTrait.maxAllowedIndex;
					if (_dsTrait.currentIndex < max)
					{
						_dsTrait.switchTo(_dsTrait.currentIndex + 1);
					}
				}
				
			}
			
			private function onSwitchDown():void
			{
				if (_dsTrait && !_dsTrait.autoSwitch && !_dsTrait.switching)
				{
					if (_dsTrait.currentIndex > 0)
					{
						_dsTrait.switchTo(_dsTrait.currentIndex - 1);
					}
				}				
			}
			
			private function onAutoSwitchable():void
			{
				if (_dsTrait)
				{
					this._isAutoSwitchable = !this._isAutoSwitchable;
					_dsTrait.autoSwitch = this._isAutoSwitchable; 
					debug("Setting auto switch mode to " + this._isAutoSwitchable);
					
					_autoSwitchBtnLabel = (_isAutoSwitchable ? "Manual" : "Auto");
					updateSwitchingControls();
				}
			}
			
			private function onClickPlayBtn():void
			{
				if (mediaPlayerWrapper.mediaPlayer.playing && mediaPlayerWrapper.mediaPlayer.canPause)
				{
					playBtn.label = "Play";
					mediaPlayerWrapper.mediaPlayer.pause();
				}
				else if (mediaPlayerWrapper.mediaPlayer.paused && mediaPlayerWrapper.mediaPlayer.canPlay)
				{
					playBtn.label = "Pause";
					mediaPlayerWrapper.mediaPlayer.play();
				}
			}
						
			private function showControls(show:Boolean=true):void
			{
				mainContainer.visible = mainContainer.includeInLayout = show;
			}
		]]>
	</mx:Script>


	<mx:VBox id="mainContainer" height="100%" width="100%" paddingLeft="10" paddingTop="10">
		<mx:Label text="OSMF Dynamic Streaming Sample App" styleName="title" width="100%" textAlign="left" paddingLeft="20"/>
		<mx:Spacer height="20" />
		<mx:HBox id="inputContainer" height="60">
			<mx:Spacer width="10" />
			<mx:ComboBox id="cbMediaURL" editable="true" dataProvider="{this.smilFiles}" />
			<mx:Button label="Load" click="{loadMedia(cbMediaURL.text)}"/>
			<mx:Button label="Unload" click="{unload()}"/>
			<mx:Label text="{_mediaFileLoadState}"/>
		</mx:HBox>	

		<mx:Spacer height="5" />
		<mx:HBox>
			<mx:VBox id="videoContainer" paddingLeft="20">
				<mx:Spacer width="10" />
				<mx:Canvas id="wrapperContainer">
				    <samples:MediaPlayerWrapper id="mediaPlayerWrapper" width="640" height="360"  />				
				</mx:Canvas>
			    <mx:VBox id="controlsContainer">
		    		<mx:HSlider id="seekBar" width="100%" thumbPress="toggleDragging(true)" thumbRelease="toggleDragging(false)" />
		    		<mx:HBox horizontalAlign="right" width="100%">
	    				<mx:Label text="Position: " />
						<mx:Label id="lblPlayhead" width="100" styleName="timeCode" />
						<mx:Label text="Duration: " />
		    			<mx:Label id="lblDuration" width="100" styleName="timeCode" />			
						<mx:Button id="playBtn" label="Pause" click="onClickPlayBtn()" enabled="{mediaPlayerWrapper.mediaPlayer.canPlay}" />
						<mx:Button id="autoSwitchBtn" label="{_autoSwitchBtnLabel}" click="onAutoSwitchable()" enabled="{_dsTrait!=null}" />
						<mx:Button id="switchUpBtn" label="+" click="onSwitchUp()" enabled="false" />
						<mx:Button id="switchDownBtn" label="-" click="onSwitchDown()" enabled="false" />
	    			</mx:HBox>
				</mx:VBox>	    						
			</mx:VBox>
			<mx:Spacer width="20" />
			<mx:VBox id="debugContainer">
				<mx:TextArea id="taDebug" wordWrap="false" editable="false" width="640" height="360"/>
			</mx:VBox>			
		</mx:HBox>
	</mx:VBox>
</mx:Application>
