<?xml version="1.0" encoding="utf-8"?>
<!--
/*****************************************************
*  
*  Copyright 2009 Adobe Systems Incorporated.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Adobe Systems Incorporated.
*  Portions created by Adobe Systems Incorporated are Copyright (C) 2009 Adobe Systems 
*  Incorporated. All Rights Reserved. 
*  
*****************************************************/
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" xmlns:samples="org.osmf.samples.*"
	creationComplete="setupFactory()"
	 verticalAlign="middle"
	 backgroundColor="black"
	 color="black"
	 themeColor="black"
	 horizontalAlign="center">
	 <mx:Script>
	 	<![CDATA[
	 		import org.osmf.metadata.StringIdentifier;
	 		import org.osmf.metadata.ObjectFacet;
	 		import org.osmf.layout.LayoutRendererProperties;
	 		import org.osmf.metadata.Facet;
			import org.osmf.audio.AudioElement;
			import org.osmf.composition.CompositeElement;
			import org.osmf.composition.ParallelElement;
			import org.osmf.composition.SerialElement;
			import org.osmf.display.ScaleMode;
			import org.osmf.events.MediaErrorEvent;
			import org.osmf.events.MediaPlayerCapabilityChangeEvent;
			import org.osmf.events.MetadataEvent;
			import org.osmf.image.ImageLoader;
			import org.osmf.image.ImageElement;
			import org.osmf.media.MediaElement;
			import org.osmf.media.MediaFactory;
			import org.osmf.media.MediaFactoryItem;
			import org.osmf.media.URLResource;
			import org.osmf.metadata.Facet;
			import org.osmf.metadata.KeyValueFacet;
			import org.osmf.metadata.MediaType;
			import org.osmf.metadata.MetadataNamespaces;
			import org.osmf.metadata.ObjectIdentifier;
			import org.osmf.net.NetLoader;
			import org.osmf.utils.URL;
			import org.osmf.video.VideoElement;
	 		
	 		private var factory:MediaFactory;
			private var sharedNetLoader:NetLoader;
			private var sharedLoader:ImageLoader;
	 			 		
	 		protected function setupFactory():void
	 		{
	 			wrapper.mediaPlayer.addEventListener(MediaPlayerCapabilityChangeEvent.HAS_AUDIO_CHANGE, onAudible);		 	
	 			wrapper.mediaPlayer.addEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError);	
	 			factory = new MediaFactory();
	 			sharedNetLoader = new NetLoader();
	 			sharedLoader = new ImageLoader();
	 			factory.addItem(new MediaFactoryItem(MediaType.AUDIO, new MetadataResourceHandler(MediaType.AUDIO).canHandleResource, createAudioElement));
	 			factory.addItem(new MediaFactoryItem(MediaType.IMAGE, sharedLoader.canHandleResource, createImageElement));	 			
	 			factory.addItem(new MediaFactoryItem(MediaType.VIDEO, new MetadataResourceHandler(MediaType.VIDEO).canHandleResource, createVideoElement));	 			
	 		}
			
			private function createAudioElement():MediaElement
			{
				return new AudioElement(null, sharedNetLoader);
			}

			private function createVideoElement():MediaElement
			{
				return new VideoElement(null, sharedNetLoader);
			}

			private function createImageElement():MediaElement
			{
				return new ImageElement(null, sharedLoader);
			}

	 		protected function createVideoComposition(serial:Boolean = false):void
	 		{
	 			facetProvider.removeAll();
	 			var resourceData:KeyValueFacet = new KeyValueFacet(MetadataNamespaces.DEFAULT_METADATA); 
	 			var comp:CompositeElement = serial ? new SerialElement() : new ParallelElement();
	 				 			
	 			var resource0:URLResource = new URLResource(new URL(sampleURLCollection[0]));
	 			var resource1:URLResource = new URLResource(new URL(sampleURLCollection[1]));
	 			var resource2:URLResource = new URLResource(new URL(sampleURLCollection[2]));	
	 			resourceData.addValue(new ObjectIdentifier(MetadataNamespaces.METADATA_KEY_MEDIA_TYPE), MediaType.VIDEO);
	 			resource0.metadata.addFacet(resourceData);
	 			resource1.metadata.addFacet(resourceData);
	 			resource2.metadata.addFacet(resourceData);
	 				
	 			comp.metadata.addEventListener(MetadataEvent.FACET_ADD, onMetadataAdd);
	 			comp.metadata.addEventListener(MetadataEvent.FACET_REMOVE, onMetadataRemove);
	 			comp.addChild(new MetadataProxy(VideoElement(factory.createMediaElement(resource2))));	 
	 			comp.addChild(new MetadataProxy(VideoElement(factory.createMediaElement(resource0))));
	 			comp.addChild(new MetadataProxy(VideoElement(factory.createMediaElement(resource1))));			
	 			
	 			var layout:LayoutRendererProperties
	 			if(serial)
	 			{
	 				for (var i:int = 0; i<3; i++)
	 				{
	 					layout = new LayoutRendererProperties(comp.getChildAt(i));
	 					layout.percentWidth = 100;
						layout.percentHeight = 100;
	 				}
				}
				else //Parallel
				{
					layout = new LayoutRendererProperties(comp.getChildAt(0));				
					layout.percentWidth = 100/3;
					layout.percentHeight = 100;
					
					layout = new LayoutRendererProperties(comp.getChildAt(1));	
					layout.percentX = 100/3;
					layout.percentWidth = 100/3;
					layout.percentHeight = 100;
					
					layout = new LayoutRendererProperties(comp.getChildAt(2));	
					layout.percentX = 2/3*100;	
					layout.percentWidth = 100/3;
					layout.percentHeight = 100;			
				}
	 			wrapper.scaleMode = ScaleMode.STRETCH;
	 				 				 				 			
	 			wrapper.element = comp;  			
	 		}
	 			 		
	 		protected function onMetadataAdd(event:MetadataEvent):void
	 		{	 			
	 			ArrayCollection(metadataFacets.dataProvider).addItem(event.facet);
	 			if (event.facet is KeyValueFacet)
	 			{
	 				var md:KeyValueFacet = event.facet as KeyValueFacet;	 				
	 				var keys:Vector.<ObjectIdentifier> = md.keys;	 						
	 			}
	 		}
	 		
	 		protected function onMetadataRemove(event:MetadataEvent):void
	 		{		 			
	 			if (event.facet is KeyValueFacet)
	 			{ 	
		 			var idx:int = ArrayCollection(metadataFacets.dataProvider).getItemIndex(event.facet);		 			
		 			ArrayCollection(metadataFacets.dataProvider).removeItemAt(idx);		
		 			getValues();
		 		}	 		
	 		}
	 			 		
	 		protected function createElement():void
	 		{	
	 			facetProvider.removeAll();
	 			var resourceData:KeyValueFacet = new KeyValueFacet(MetadataNamespaces.DEFAULT_METADATA); 
	 			resourceData.addValue(new ObjectIdentifier(MetadataNamespaces.METADATA_KEY_MEDIA_TYPE), typeCombo.selectedItem);	
	 			var url:URL =  new URL(mediaURL.text);
	 				 			
	 			var resource:URLResource = new URLResource(	url );
	 			resource.metadata.addFacet(resourceData);
	 			var elem:MediaElement = factory.createMediaElement(resource);
	 			if (typeCombo.selectedItem == MediaType.VIDEO)
	 			{
	 				elem = new MetadataProxy(VideoElement(elem));
	 			}
	 			
	 			wrapper.element = elem;	  
	 			wrapper.element.metadata.addEventListener(MetadataEvent.FACET_ADD, onMetadataAdd);
	 			wrapper.element.metadata.addEventListener(MetadataEvent.FACET_REMOVE, onMetadataRemove);	 			
	 		}
	 		
	 		protected function onAudible(event:MediaPlayerCapabilityChangeEvent):void
	 		{
	 			if (wrapper.mediaPlayer.hasAudio)
	 			{
	 				wrapper.mediaPlayer.volume = .25;
	 			}	
	 		}	 	
	 			 		
	 		//Gets all values form the selected facet.	 		
	 		protected function getValues():void
	 		{	 			
	 			metadataItemProvider.removeAll();
	 			
	 			if (metadataFacets.selectedItem && metadataFacets.selectedItem is KeyValueFacet )
				{					
					var kvMetadata:KeyValueFacet = metadataFacets.selectedItem as KeyValueFacet;
					var keys:Vector.<ObjectIdentifier> = kvMetadata.keys;					
					for (var itr:Number = 0;itr < keys.length; ++itr)
					{
						var data:Object = kvMetadata.getValue(keys[itr]);
						metadataItemProvider.addItem({data:data, key:keys[itr]});
					}									
				}	
				else if (metadataFacets.selectedItem)
				{
					var facet:Facet = Facet(metadataFacets.selectedItem);
					
					function addItems(keys:Array):void
					{
						for each (var key:String in keys)
						{
							var id:StringIdentifier = new StringIdentifier(key);
							metadataItemProvider.addItem
								(	{ data: facet.getValue(id)
									, key: id
									}
								);
						}	
					}
					
					switch (facet.namespaceURL.rawUrl)
					{
						case MetadataNamespaces.ABSOLUTE_LAYOUT_PARAMETERS.rawUrl:
						case MetadataNamespaces.RELATIVE_LAYOUT_PARAMETERS.rawUrl:
							addItems(["x","y","width","height"]);
							break;					
						case MetadataNamespaces.ANCHOR_LAYOUT_PARAMETERS.rawUrl:
						case MetadataNamespaces.PADDING_LAYOUT_PARAMETERS.rawUrl:
							addItems(["top","left","bottom","right"]);
							break;	
						case MetadataNamespaces.LAYOUT_ATTRIBUTES.rawUrl:
							addItems(["alignment", "order", "snapToPixel", "scaleMode", "registrationPoint", "mode"]);
							break;
					}
				}	
	 		}
	 		
	 		protected function keyLabel(item:Object, column:DataGridColumn):String
	 		{
	 			return item.key is StringIdentifier
	 				? item.key.string
	 				: item.key.key.toString();
	 		}
	 		
	 		//Adds a new KeyValueFacet to the metadata list
	 		protected function addFacet():void
	 		{
	 			wrapper.element.metadata.addFacet(new KeyValueFacet(new URL(nameSpace.text)));	 			
	 		}
	 		
	 		//Adds a new KeyValueFacet to the metadata list
	 		protected function removeFacet():void
	 		{
	 			wrapper.element.metadata.removeFacet(metadataFacets.selectedItem as Facet);	 			
	 		}
	 			 		
	 		//Adds a value to the KeyValueFacet
			protected function addValue():void
			{
				if (metadataFacets.selectedItem)
				{
					var kvMetadata:KeyValueFacet = metadataFacets.selectedItem as KeyValueFacet;
					kvMetadata.addValue(new ObjectIdentifier(key.text), value.text);
					getValues();
				}
			}
			
			protected function retrieveKeyValue():void
			{
				if (keyValueList.selectedItem)
				{					
					value.text = keyValueList.selectedItem.data;
					key.text = keyValueList.selectedItem.key is StringIdentifier
								? keyValueList.selectedItem.key.string
								: keyValueList.selectedItem.key.key;					
				}
			}	
			
			protected function removeValue():void
			{
				if (keyValueList.selectedItem)
				{
					var kvMetadata:KeyValueFacet = metadataFacets.selectedItem as KeyValueFacet;
					kvMetadata.removeValue(	keyValueList.selectedItem.key);		
					value.text = "";
					key.text = "";	
					getValues();
				}
			}
			
			protected function updateValue():void
			{
				if (keyValueList.selectedItem)
				{
					var kvMetadata:KeyValueFacet = metadataFacets.selectedItem as KeyValueFacet;
					kvMetadata.addValue(keyValueList.selectedItem.key, value.text);					
					getValues();					
				}
			}
					
			protected function generateLabelForFacet(item:Object, column:DataGridColumn):String
			{
				if(column.dataField == "type")
				{
					 return flash.utils.getQualifiedClassName(item);
				}
				else
				{
					return item.namespaceURL.toString();
				}
			}		
			
			protected function onMediaError(event:MediaErrorEvent):void
			{
				//Handle Media Errors Here.
			}
									 		
	 	]]>
	 </mx:Script>
	 
	 <mx:Style>
	 	Label
	 	{
	 		color:white
	 	}
	 </mx:Style>
		 
	<samples:MediaPlayerWrapper id="wrapper" width="100%" height="50%" />
	<mx:HBox
		width="100%"
		height="50%"
		>	
		<mx:Form 
			id="metadataForm" 
			width="35%" 
			height="50%" >		
			<mx:FormItem label="Media URL:">
				
				<mx:TextInput 
					id="mediaURL" 
					width="470"
					text="{sampleURLs.selectedLabel}" />					
				<mx:ComboBox 
					id="sampleURLs" 
					width="470"
					change="{mediaURL.text = sampleURLs.selectedItem.toString()}">
					<mx:ArrayCollection id="sampleURLCollection">					
						["http://mediapm.edgesuite.net/strobe/content/test/SpaceAloneHD_sounas_640_500_short.flv",
						"http://mediapm.edgesuite.net/strobe/content/test/elephants_dream_768x428_24_short.flv",
						"http://mediapm.edgesuite.net/strobe/content/test/AFaerysTale_sylviaApostol_640_500_short.flv",
						"rtmp://cp67126.edgefcs.net/ondemand/mediapm/strobe/content/test/SpaceAloneHD_sounas_640_500_short",
						"rtmp://cp67126.edgefcs.net/ondemand/mediapm/strobe/content/test/elephants_dream_768x428_24_short",
						"rtmp://cp67126.edgefcs.net/ondemand/mediapm/strobe/content/test/AFaerysTale_sylviaApostol_640_500_short"]
					</mx:ArrayCollection>
				</mx:ComboBox>
			</mx:FormItem>
			
			<mx:FormItem label="Media Type:">
				<mx:ComboBox id="typeCombo">
				 	<mx:dataProvider>
				 		{[MediaType.VIDEO, MediaType.AUDIO, MediaType.IMAGE, MediaType.SWF]}
				 	</mx:dataProvider>
				</mx:ComboBox>
			</mx:FormItem>
			
			<mx:FormItem>
				<mx:Button label="Create Media Element" click="createElement()" />			
			</mx:FormItem>
			
			<mx:FormItem>
				<mx:Button label="Create Serial Video Comp" click="createVideoComposition(true)" />	
			</mx:FormItem>
			
			<mx:FormItem>
				<mx:Button label="Create Parallel Video Comp" click="createVideoComposition()" />
			</mx:FormItem>
		</mx:Form>
		
		<mx:VBox 
			height="100%" 
			width="35%">			
			<mx:Label text="Facet List:" />
			
			<mx:DataGrid id="metadataFacets" 
				width="100%"
				height="100%"
				change="getValues()" 				
				labelFunction="{generateLabelForFacet}"  
				>
				<mx:ArrayCollection id="facetProvider" />				
				<mx:columns>
					<mx:DataGridColumn dataField="namespaceURL" />
					<mx:DataGridColumn dataField="type" />
				</mx:columns>				
			</mx:DataGrid>
						
			<mx:ComboBox id="nameSpace" >		
				<mx:dataProvider>
					{[MetadataNamespaces.DEFAULT_METADATA.rawUrl, "http://example.com", "http://akamai.com"]}				
				</mx:dataProvider>							
			</mx:ComboBox>	
								
			<mx:Button label="Add New Facet" click="addFacet()" />		
			<mx:Button label="Remove Selected Facet" click="removeFacet()" />				
		</mx:VBox>
		
		<mx:VBox
			width="25%"
			height="100%"
			>
			<mx:Label text="Data for Selected Facet:" />
			
			<mx:DataGrid id="keyValueList"
				width="100%"
				height="100%"
				change="retrieveKeyValue()" >
				<mx:ArrayCollection id="metadataItemProvider" />
				<mx:columns>
					<mx:DataGridColumn headerText="Key" 
						labelFunction="keyLabel" 
						dataField="key" 
						/>
					<mx:DataGridColumn headerText="Data" 
						dataField="data"  
						/>
				</mx:columns>				
			</mx:DataGrid>
			
			<mx:HBox>
				<mx:Label text="Key" />
				<mx:TextInput id="key" />
			</mx:HBox>
			
			<mx:HBox>
				<mx:Label text="Value" />
				<mx:TextInput id="value" />
			</mx:HBox>	
					
			<mx:Button 
				label="Add Value" 
				click="addValue()" 
				/>				
			<mx:Button 
				label="Remove Value" 
				click="removeValue()" 
				/>		
		</mx:VBox>
		
	</mx:HBox>
</mx:Application>
