<?xml version="1.0" encoding="utf-8"?>
<!--
/*****************************************************
*  
*  Copyright 2009 Adobe Systems Incorporated.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Adobe Systems Incorporated.
*  Portions created by Adobe Systems Incorporated are Copyright (C) 2009 Adobe Systems 
*  Incorporated. All Rights Reserved. 
*  
*****************************************************/
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	xmlns:samples="org.osmf.samples.*"
	creationComplete="onComplete(event)">


	<mx:Script>
		<![CDATA[
			import org.osmf.audio.AudioElement;
			import org.osmf.metadata.*;
			import org.osmf.logging.flex.FlexLogWrapper;
			import org.osmf.logging.TraceLoggerFactory;
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.SliderEvent;
			import mx.logging.targets.TraceTarget;
			import mx.logging.LogEventLevel;

			import flash.utils.getDefinitionByName;
			import flash.net.getClassByAlias;

			import org.osmf.events.*;
			import org.osmf.image.*;
			import org.osmf.logging.ILogger;
			import org.osmf.logging.Log;
			import org.osmf.media.*;
			import org.osmf.model.*;
			import org.osmf.net.*;
			import org.osmf.plugin.*;
			import org.osmf.plugins.video.SimpleVideoPluginInfo;
			import org.osmf.utils.*;
			import org.osmf.traits.*;
			import org.osmf.video.*;
			import org.osmf.plugins.smoothing.SmootherPluginInfo;
			import org.osmf.plugins.smoothing.Smoother;
			
			
			// Steps to run this app:
			//
			// SCENARIO - 1 (Loading a Static Plugin)
			//
			// 1. Enter 'org.osmf.plugins.video.SimpleVideoPluginInfo' (without the quotes) in the top textbox 
			// 2. Enter a URL to an FLV file (RTMP or HTTP) in the second textbox
			// 3. Click on the button 'Load Media Resource'
			// 4. Confirm that you get the Alert dialog "No registered MediaInfo for this resource"
			// 5. Now click on the button 'Load Plugin'
			// 6. Now click again on the button 'Load Media Resource'
			// 7. Watch the video play back successfully
			//
			// What happened here?
			//
			// To start with, the MediaFactory was empty. When you clicked on 'Load Media Resource' for the video URL, the MediaFactory
			// could not create a MediaElement that had an associated MediaResourceBaseHandler for the URLResource (pointing to the video).
			// When you loaded the plugin (org.osmf.plugins.video.SimpleVideoPluginInfo - this class is compiled in with this project)
			// the MediaFactory got populated with 1 MediaInfo object that had the MediaResourceBaseHandler for handling videos. On the subsequent
			// click to load the media resource, the video started playing back.
			//
			//
			// Notice that the method 'loadPlugin' parses the input string and creates an appropriate MediaResourceBase for loading the plugin.
			// If you specify a URL to a plugin, it will create a URLResource. In the above example, since the string represented a class name,
			// the PluginFactory returned a plugin element that knows how to load plugins statically.
			//
			//
			// SCENARIO - 2 (Loading a Dynamic Plugin)
			//
			// In order to see dynamic plugin loading in action, you need to do the following:
			//
			// 1. Compile this project and drop the resulting SWF into a location accessible via HTTP, say, http://www.foo.com/strobe/PluginTestFlexApp.swf
			// 2. Compile the SamplePlugin project (included in this package as a separate project), and drop the SWF in the same location (http://www.foo.com/strobe/SamplePlugin.swf)
			// 3. Edit the SMIL file (included in this package) VideoSequence.smi to contain URLs to real video assets (either RTMP or HTTP), and put it in the same location
			//    (http://www.foo.com/strobe/VideoSequence.smi)
			// 4. Open a browser and point to the application SWF (http://www.foo.com/strobe/PluginSample.swf)
			// 5. Enter the Plugin SWF URL in the top box (http://www.foo.com/strobe/SamplePlugin.swf)
			// 6. Enter the SMIL URL in the second textbox (http://www.foo.com/strobe/VideoSequence.smi)
			// 7. Hit Load Media Resource, confirm the Alert saying "No registered MediaInfo for this resource"
			// 8. Now hit Load Plugin to load the SMIL plugin
			// 9. Now hit the Load Media Resource button again to see the video sequence playing back
			//
			// What happened here?
			//
			// Pretty much the same as scenario 1. First, there was no handler for a URLResource pointing to a SMIL document. After the plugin was loaded,
			// the MediaFactory was populated with one, and playback worked. 
			//
			// 
			// SCENARIO - 3 (Playing a stream video with authentication)
			//
			// In order to play a stream video with authentication such as this:
			//    rtmp://cp78634.edgefcs.net/ondemand/mp4:mediapmsec/osmf/content/test/SpaceAloneHD_sounas_640_700.mp4?auth=daEc2a9a5byaMa.avcxbiaoa8dBcibqbAa8-bkxDGK-b4toa-znnrqzzBvl&aifp=v0001
			//
			// you need to do the following:
			//
			// 1.  Compile this project and drop the resulting SWF into a location accessible via HTTP, say, http://www.foo.com/strobe/PluginTestFlexApp.swf
			// 2.  Open a browser and point to the application SWF (http://www.foo.com/strobe/PluginTestFlexApp.swf)
			// 3.  Enter the streaming video URL in the second textbox (rtmp://cp78634.edgefcs.net/ondemand/mp4:mediapmsec/osmf/content/test/SpaceAloneHD_sounas_640_700.mp4?auth=daEc2a9a5byaMa.avcxbiaoa8dBcibqbAa8-bkxDGK-b4toa-znnrqzzBvl&aifp=v0001)
			// 4.  Click the "Load Media Resource" button and an alert window will pop up stating "Failed to load resource".
			// 5.  Drop the AkamaiBasicStreamingPlugin (can be found within the OSMF drop) in the same location (http://www.foo.com/strobe/SamplePlugin.swf)
			// 6.  Enter the Plugin SWF URL in the top box (http://www.foo.com/strobe/AkamaiBasicStreamingPlugin.swf)
			// 7.  Click the "Load Plugin" button to load AkamaiBasicStreamingPlugin.
			// 8.  Click the "Load Media Resource" button again and an alert window still pops up stating "Failed to load resource".
			// 9.  Give a higher priority value to the MediaInfo with ID "com.akamai.osmf.BasicStreamingVideoElement" by selecting the 
			//     corresponding MediaInfo from the table, changing the priority value (say 30) and clicking the "Update" button.
			// 10. Click the "Load Media Resource" button again to load and play the video.
			//
			// What happened here?
			// 
			// The streaming video with authentication can only be correctly handled by the Akamai's BasicStreamingVideoElement. 
			// Therefore, AkamaiBasicStreamingPlugin must be loaded. Also, since the Standard Video Element has no knowledge
			// about the fact that the URL is a streaming video with authentication, it will claim to be able to load and play
			// the video. Since both media elements have the same priority, the AppMediaResourceHandlerResolver (AppMediaResourceHandlerResolver.as)
			// picks the first element which happens to be the Standard Video Element. 
			//
			// Once we set the BasicStreamingVideoElement with a higher priority value, AppMediaResourceHandlerResolver picks the
			// right media element and the video is loaded and played properly.
			
			private function onComplete(event:Event):void
			{
				// declaring the class variable so that the Flex Builder compiler
				// includes this class in the compiled SWF. Since this class is not used anywhere
				// in the code, Flex Builder won't include it by default. However, for
				// loading the video plugin statically (scenario 1 described above),
				// this class needs to be included.
				var v:SimpleVideoPluginInfo;
				var s:SmootherPluginInfo;
				initUI();
				initLogging();
			}

			private function initLogging():void
			{
				if (traceLogger.selected)
				{
					Log.loggerFactory = new TraceLoggerFactory();
				}
				else
				{
					var flexLogWrapper:FlexLogWrapper = new FlexLogWrapper();
					var traceTarget:TraceTarget = new TraceTarget();
					traceTarget.level = LogEventLevel.DEBUG;
					flexLogWrapper.addTarget(traceTarget);
					Log.loggerFactory = flexLogWrapper;
				}
				
				_logger = Log.getLogger("PluginSample");
				_logger.debug("initLogging finished");
			}

			private function initUI():void
			{
				refreshResourceHandlerList();

				wrapper.mediaPlayer.addEventListener(
					LoadEvent.LOAD_STATE_CHANGE, onLoadStateChange);
				
				resourceHandlerList.addEventListener(ListEvent.ITEM_CLICK, onItemClick);
				update.addEventListener(MouseEvent.CLICK, onUpdateClicked);

				traceLogger.addEventListener(MouseEvent.CLICK, onDefaultLoggerSelected);
				flexLogger.addEventListener(MouseEvent.CLICK, onFlexLoggerSelected);
			}

			private function onDefaultLoggerSelected(event:MouseEvent):void
			{
				initLogging();
			}
			
			private function onFlexLoggerSelected(event:MouseEvent):void
			{
				initLogging();
			}

			private function refreshResourceHandlerList():void
			{
				var resourceHandlers:ArrayCollection = Model.getInstance().resourceHandlers;
				resourceHandlerList.dataProvider = resourceHandlers;
				if (resourceHandlers.length > 0)
				{
					var resourceHandlerDescriptor:ResourceHandlerDescriptor 
						= resourceHandlers.getItemAt(0) as ResourceHandlerDescriptor;
						
					resourceHandlerId.label = resourceHandlerDescriptor.mediaInfoId;
					resourceHandlerPriority.text = new Number(resourceHandlerDescriptor.priority).toString();
					resourceHandlerList.selectedIndex = 0;
				}
				
				resourceHandlerId.visible = update.visible = (resourceHandlers.length > 0);
			}
			
			private function onLoadStateChange(event:LoadEvent):void
			{
				if (event.loadState == LoadState.LOAD_ERROR)
				{
					Alert.show("Failed to load resource");
				}
			}
			
			private function onUpdateClicked(event:MouseEvent):void
			{
				Model.getInstance().updatePriorityByMediaInfoId(
					resourceHandlerId.label, int(resourceHandlerPriority.text));
				
				refreshResourceHandlerList();
			}
			
			private function onItemClick(event:ListEvent):void
			{
				var resourceHandlers:ArrayCollection = Model.getInstance().resourceHandlers;
				var resourceHandlerDescriptor:ResourceHandlerDescriptor 
					= resourceHandlers.getItemAt(resourceHandlerList.selectedIndex) as ResourceHandlerDescriptor;
				
				resourceHandlerId.label = resourceHandlerDescriptor.mediaInfoId;
				resourceHandlerPriority.text = new Number(resourceHandlerDescriptor.priority).toString();
			}
			
			private function loadItem(url:String):void
			{
				wrapper.mediaPlayer.autoPlay = true;

				var resource:URLResource = new URLResource(new URL(url));
				
				var mediaElement:MediaElement 
					= Model.getInstance().mediaFactory.createMediaElement(resource);
				if (mediaElement == null)
				{
					Alert.show("No registered MediaInfo for this resource");
				}
				else
				{
					wrapper.element = mediaElement;
				}
			}
			
			private function loadPlugin(source:String):void
			{
				var pluginResource:MediaResourceBase;
				if (source.substr(0, 4) == "http" || source.substr(0, 4) == "file")
				{
					// Create a URLResource if the source is URL based
					pluginResource = new URLResource(new URL(source));
				}
				else
				{
					// Assume the source is a class
					var pluginInfoRef:Class = flash.utils.getDefinitionByName(source) as Class;
					pluginResource = new PluginInfoResource(new pluginInfoRef);
				}
				
				var creationParam:KeyValueFacet = new KeyValueFacet(new URL("http://org.yourcompany/creation_params/"));
				pluginResource.metadata.addFacet(creationParam);
				
				loadPluginFromResource(pluginResource);			
			}
			
			private function loadPluginFromResource(pluginResource:MediaResourceBase):void
			{
				var model:Model = Model.getInstance();
				model.pluginManager.addEventListener(PluginLoadEvent.PLUGIN_LOADED, onPluginLoaded);
				model.pluginManager.addEventListener(PluginLoadEvent.PLUGIN_LOAD_FAILED, onPluginLoadFailed);
				model.pluginManager.addEventListener(MediaErrorEvent.MEDIA_ERROR, onMediaError);
				model.pluginManager.loadPlugin(pluginResource);				
			}
			
			private function onMediaError(event:MediaErrorEvent):void
			{
				Alert.show("media error");
			}
			
			private function onPluginLoaded(event:PluginLoadEvent):void
			{
				if (_logger != null && _logger.debugEnabled)
				{
					_logger.debug("Plugin Loaded Successfully");
				}
				pluginLoadState.text = "LOADED";
				pluginLoadState.visible = true;
				
				Model.getInstance().updateResourceHandlers();
				refreshResourceHandlerList();
			}
			
			private function onPluginLoadFailed(event:PluginLoadEvent):void
			{
				if (_logger != null && _logger.debugEnabled)
				{
					_logger.debug("Plugin Loading Failed");
				}
				pluginLoadState.text = "LOAD FAILED!";
				pluginLoadState.visible = true;
			}
			
			private var pluginElement:MediaElement;
			private var _logger:ILogger;
		]]>
	</mx:Script>


	<mx:VBox height="100%" width="100%">
		
		<mx:Spacer height="10" />
		<mx:HBox height="60">
			<mx:Spacer width="10" />

			<!-- Replace this text with "org.osmf.plugins.video.SimpleVideoPlauginInfo" 
				for the static plugin example -->
			<mx:ComboBox
					width="500"
					id="urlInput"
					editable="true">				
					<mx:dataProvider>
						<mx:Array>							
							<mx:String>org.osmf.plugins.video.SimpleVideoPluginInfo</mx:String>
							<mx:String>org.osmf.plugins.smoothing.SmootherPluginInfo</mx:String>
							<mx:String>http://yourserver.com/strobeplugin/yourDynamicPlugin.swf</mx:String>
						</mx:Array>
					</mx:dataProvider>
				</mx:ComboBox>
			
			<mx:Button label="Load Plugin" click="{loadPlugin(urlInput.text)}"/>
			
			<mx:Label id="pluginLoadState" text="" visible="false" />

		</mx:HBox>	
		
		<mx:HBox height="60">
		
			<mx:Spacer width="10" />

			<mx:VBox>
				<!-- Replace this text with a url to a real video (http or rtmp) 
					for the static plugin example -->
				<mx:ComboBox
					width="500"
					id="mediaInput"
					editable="true">				
					<mx:dataProvider>
						<mx:Array>
							<mx:String>http://mediapm.edgesuite.net/strobe/content/test/AFaerysTale_sylviaApostol_640_500_short.flv</mx:String>
							<mx:String>rtmp://cp67126.edgefcs.net/ondemand/mediapm/strobe/content/test/SpaceAloneHD_sounas_640_500_short</mx:String>
							<mx:String>http://mediapm.edgesuite.net/osmf/content/test/train_1500.mp3</mx:String>
							<mx:String>http://yourserver.com/strobeplugin/sampleSmil.smi</mx:String>
							<mx:String>http://mediapm.edgesuite.net/osmf/image/adobe-lq.png</mx:String>
						</mx:Array>
					</mx:dataProvider>
				</mx:ComboBox>
			</mx:VBox>

			<mx:Button label="Load Media Resource" click="{loadItem(mediaInput.text)}"/>

			<mx:Button label="Play" click="{wrapper.mediaPlayer.play()}"
				enabled="{wrapper.mediaPlayer.canPlay}" />
				
			<mx:Button label="Pause" click="{wrapper.mediaPlayer.pause()}"
				enabled="{wrapper.mediaPlayer.canPlay}"  />
			
		</mx:HBox>	
		
		<mx:Form>
			<mx:HBox>
				<mx:RadioButton groupName="logger" id="traceLogger" label="Trace Logger" selected="true"/>
				<mx:RadioButton groupName="logger" id="flexLogger" label="Flex Logger"/>
			</mx:HBox>
		</mx:Form>
		
		<mx:Form>
			<mx:Label 
				text	="Select a row in the following table and update the relative priority of each resource handler."
				/>
		</mx:Form>

		<mx:Form>
			<mx:DataGrid id="resourceHandlerList">
				<mx:columns>
					<mx:DataGridColumn 
						width		="300"
						dataField	="mediaInfoId" 
						headerText	="MediaInfo Id"/>
					<mx:DataGridColumn
						width		="100"
						dataField	="priority" 
						headerText	="Priority"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Form>
		
		<mx:HBox>
			<mx:Form>
				<mx:FormItem 
					id		="resourceHandlerId" 
					label	="">
					<mx:TextInput 
						id	="resourceHandlerPriority"/>
				</mx:FormItem>
			</mx:Form>
			
			<mx:Form>
				<mx:Button 
					id		="update" 
					label	="Update" 
					visible	="false"
					/>
			</mx:Form>
		</mx:HBox>

		<mx:HBox height="50%" width="50%">
		
			<mx:Spacer width="10" />
			
		    <samples:MediaPlayerWrapper 
				id="wrapper"
				width="100%"
				height="100%"
			/>
		</mx:HBox>

	</mx:VBox>

</mx:Application>

