/** * UPDATED TO ALLOW  * SINGLE LINE HINTS WITH HEIGHT LESS THAN 30PX * HINT TO SHOW UNDER MOUSE using relativeYabove *//**The MIT LicenseCopyright (c) 2008 Duncan Reid ( http://www.hy-brid.com )Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.**/package adobeTV.flash.view {				import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.geom.*;	import flash.text.*;	import flash.utils.Timer;		/**	 * Public Setters:	 	 *		tipWidth 					Number				Set the width of the tooltip	 *		titleFormat				TextFormat			Format for the title of the tooltip	 *		contentFormat			TextFormat			Format for the bodycopy of the tooltip	 *		align						String					left, right, center	 *		delay						Number				Time in milliseconds to delay the display of the tooltip	 *		hook						Boolean				Displays a hook on the bottom of the tooltip	 *		hookSize					Number				Size of the hook	 *		cornerRadius			Number				Corner radius of the tooltip, same for all 4 sides	 *		colors						Array					Array of 2 color values ( [0xXXXXXX, 0xXXXXXX] ); 	 *		autoSize					Boolean				Will autosize the fields and size of the tip with no wrapping or multi-line capabilities, 	 															helpful with 1 word items like "Play" or "Pause"	 * 		border					Number				Color Value: 0xFFFFFF	 *		borderSize				Number				Size Of Border	 *	 * Example:	 	 		var tf:TextFormat = new TextFormat();			tf.bold = true;			tf.size = 12;			tf.color = 0xff0000;						var tt:ToolTip = new ToolTip();			tt.hook = true;			tt.hookSize = 20;			tt.cornerRadius = 20;			tt.align = "center";			tt.titleFormat = tf;			tt.show( DisplayObject, "Title Of This ToolTip", "Some Copy that would go below the ToolTip Title" );	 *	 *	 * @author Duncan Reid, www.hy-brid.com	 * @date October 17, 2008	 * @version 1.1	 */	 	public class ToolTip extends Sprite {				//objects		private var _stage:Stage;		private var _parentObject:DisplayObject;		private var _tf:TextField;  // title field		private var _cf:TextField;  //content field			//formats		private var _titleFormat:TextFormat;		private var _contentFormat:TextFormat;				/* check for format override */		private var _titleOverride:Boolean = false;		private var _contentOverride:Boolean = false;				//defaults		private var _defaultWidth:Number = 200;		private var _defaultHeight:Number;		private var _buffer:Number = 10;		private var _align:String = "center"		private var _cornerRadius:Number = 12;		private var _bgColors:Array = [0xFFFFFF, 0x9C9C9C];		private var _autoSize:Boolean = false;		private var _hookEnabled:Boolean = false;		private var _delay:Number = 0;  //millilseconds		private var _hookSize:Number = 10;		private var _border:Number;		private var _borderSize:Number = 1;				private var _absXposition:Number = -1;		private var _absYposition:Number = -1;				//offsets		private var _offSet:Number;		private var _hookOffSet:Number;				//delay		private var _timer:Timer;					public function ToolTip():void {			//do not disturb parent display object mouse events			mouseEnabled = false;			buttonMode = false;			mouseChildren = false;			//setup delay timer			_timer = new Timer(_delay, 1);            _timer.addEventListener("timer", timerHandler);		}				public function setContent( title:String, content:String = null ):void {			graphics.clear();			addCopy( title, content );			setOffset();			drawBG();		}				public function show( p:DisplayObject, title:String, content:String = null,									isOnUP:Boolean = false, absoluteXPosition:Number = -1, absoluteYPosition:Number = -1, distance:Number = -1):void {			//get the stage from the parent			_stage = p.stage;			_parentObject = p;			_absXposition = absoluteXPosition;			_absYposition = absoluteYPosition;									if (distance!=-1) relativeY = distance;			addCopy( title, content );			setOffset();			drawBG();			bgGlow();			//initialize coordinates			var parentCoords:Point = new Point( _parentObject.mouseX, _parentObject.mouseY );			var globalPoint:Point = p.localToGlobal(parentCoords);			x = globalPoint.x + _offSet;			y = globalPoint.y - height + relativeY;						alpha = 0;			_stage.addChild( this );						if (isOnUP) {				_stage.addEventListener( MouseEvent.MOUSE_UP, onMouseOut );			}else {				_parentObject.addEventListener( MouseEvent.MOUSE_OUT, onMouseOut );			}						follow( true );            _timer.start();		}				public function hide():void {			animate( false );		}				private function timerHandler( event:TimerEvent ):void 		{			animate(true);		}		private function onMouseOut( event:MouseEvent ):void 		{			//event.currentTarget.removeEventListener(event.type, arguments.callee);			hide();		}				private function follow( value:Boolean ):void {			if( value )			{				addEventListener( Event.ENTER_FRAME, eof );			}			else			{				removeEventListener( Event.ENTER_FRAME, eof );			}		}				private function eof( event:Event ):void {			position();		}				private function absPositioning():Point {			var currentX:Number = _parentObject.mouseX;			var currentY:Number = _parentObject.mouseY;			if (_absXposition!=-1) currentX = _parentObject.x+_absXposition;			if (_absYposition!=-1) currentY = _parentObject.y+_absYposition;			return  new Point( currentX, currentY );		}				private function position():void 		{			var speed:Number = 3;					var parentCoords:Point = absPositioning();			var globalPoint:Point = _parentObject.localToGlobal(parentCoords);			var xp:Number = globalPoint.x + _offSet-(_absXposition!=-1?(_defaultWidth*.5):0);			var yp:Number = globalPoint.y - height- relativeY*.5;			x = xp;			y = yp;		}		private function addCopy( title:String, content:String ):void 		{			if( ! _titleOverride ){				initTitleFormat();			}			var titleIsDevice:Boolean = isDeviceFont(  _titleFormat );			if( _tf == null ){			_tf = createField( titleIsDevice ); 			}			_tf.htmlText = title;			_tf.setTextFormat( _titleFormat, 0, title.length );			if( _autoSize ){				_defaultWidth = _tf.textWidth + 4 + ( _buffer * 2 );			}else{				_tf.width = _defaultWidth - ( _buffer * 2 );			}						_tf.x = _tf.y = _buffer;			textGlow( _tf );			addChild( _tf );			if( content != null ){				if( ! _contentOverride ){					initContentFormat();				}				//check for device font				var contentIsDevice:Boolean = isDeviceFont(  _contentFormat );				if( _cf == null ){				_cf = createField( contentIsDevice );				}				_cf.htmlText = content;				var bounds:Rectangle = getBounds( this );				_cf.x = _buffer;				//_cf.y = bounds.height + 5;				_cf.y = _tf.y +  _tf.textHeight;				textGlow( _cf );				_cf.setTextFormat( _contentFormat );				if( _autoSize ){					var cfWidth:Number = _cf.textWidth + 4 + ( _buffer * 2 )					_defaultWidth = cfWidth > _defaultWidth ? cfWidth : _defaultWidth;				}else{					_cf.width = _defaultWidth - ( _buffer * 2 );				}				addChild( _cf );				}		}				//create field, if not device font, set embed to true		private function createField( deviceFont:Boolean ):TextField 		{			var tf:TextField = new TextField();			tf.embedFonts = ! deviceFont;			tf.gridFitType = "pixel";			//tf.border = true;			tf.autoSize = TextFieldAutoSize.LEFT;			tf.selectable = false;			if( ! _autoSize ){				tf.multiline = true;				tf.wordWrap = true;			}			return tf;		}				//draw background, use drawing api if we need a hook		private function drawBG():void 		{			//graphics.clear();			var bounds:Rectangle = getBounds( this );			var h:Number = isNaN( _defaultHeight ) ? bounds.height + ( _buffer * 2 ) : _defaultHeight;			//trace("height=" + h);			if (h < 30) _tf.y = 0;			var fillType:String = GradientType.LINEAR;		   	//var colors:Array = [0xFFFFFF, 0x9C9C9C];		   	var alphas:Array = [1, 1];		   	var ratios:Array = [0x00, 0xFF];		   	var matr:Matrix = new Matrix();			var radians:Number = 90 * Math.PI / 180;		  	matr.createGradientBox(_defaultWidth, h, radians, 0, 0);		  	var spreadMethod:String = SpreadMethod.PAD;			if( ! isNaN( _border )){				graphics.lineStyle( _borderSize, _border, 1 );			}		  	graphics.beginGradientFill(fillType, _bgColors, alphas, ratios, matr, spreadMethod); 				//trace("creating hook"+_hookEnabled );			if( _hookEnabled ){								//hook				if (_absXposition != -1) { //trace("side hook created");					hookHorizontal(h);				}else{					hookVertical(h);				}							}else{				graphics.drawRoundRect( 0, 0, _defaultWidth, h, _cornerRadius );			}		}							private function hookHorizontal(h:Number):void 		{				var xp:Number = 0; var yp:Number = 0; var w:Number = _defaultWidth; 				graphics.moveTo ( xp + _cornerRadius, yp );				graphics.lineTo ( xp + w - _cornerRadius, yp );				graphics.curveTo ( xp + w, yp, xp + w, yp + _cornerRadius );												//hook				graphics.lineTo ( xp + w, yp+ _cornerRadius  );				graphics.lineTo ( xp + w , yp+ h*.25 );				graphics.lineTo ( xp + w+ _hookSize , yp+ h*.5);				graphics.lineTo ( xp + w , yp+ h*.75 );												graphics.lineTo ( xp + w, yp + h - _cornerRadius );				graphics.curveTo ( xp + w, yp + h, xp + w - _cornerRadius, yp + h );																graphics.curveTo ( xp, yp + h, xp, yp + h - _cornerRadius );				graphics.lineTo ( xp, yp + _cornerRadius );				graphics.curveTo ( xp, yp, xp + _cornerRadius, yp );				graphics.endFill();		}				private function hookVertical(h:Number):void 		{				var xp:Number = 0; var yp:Number = 0; var w:Number = _defaultWidth; 				graphics.moveTo ( xp + _cornerRadius, yp );				graphics.lineTo ( xp + w - _cornerRadius, yp );				graphics.curveTo ( xp + w, yp, xp + w, yp + _cornerRadius );				graphics.lineTo ( xp + w, yp + h - _cornerRadius );				graphics.curveTo ( xp + w, yp + h, xp + w - _cornerRadius, yp + h );								//hook				graphics.lineTo ( xp + _hookOffSet + _hookSize, yp + h );				graphics.lineTo ( xp + _hookOffSet , yp + h + _hookSize );				graphics.lineTo ( xp + _hookOffSet - _hookSize, yp + h );				graphics.lineTo ( xp + _cornerRadius, yp + h );								graphics.curveTo ( xp, yp + h, xp, yp + h - _cornerRadius );				graphics.lineTo ( xp, yp + _cornerRadius );				graphics.curveTo ( xp, yp, xp + _cornerRadius, yp );				graphics.endFill();		}								/* Fade In / Out */				private function animate( show:Boolean ):void 		{			var end:int = show == true ? 1 : 0;		    			alpha = end;					}				private function onComplete( event:Event ):void 		{						cleanUp();		}			/* End Fade */								/** Getters / Setters */				public function set tipWidth( value:Number ):void {			_defaultWidth = value;		}				public function set titleFormat( tf:TextFormat ):void {			_titleFormat = tf;			if( _titleFormat.font == null ){				_titleFormat.font = "_sans";			}			_titleOverride = true;		}				public function set contentFormat( tf:TextFormat ):void {			_contentFormat = tf;			if( _contentFormat.font == null ){				_contentFormat.font = "_sans";			}			_contentOverride = true;		}				public function set align( value:String ):void {			var a:String = value.toLowerCase();			var values:String = "right left center";			if( values.indexOf( value ) == -1 ){				throw new Error( this + " : Invalid Align Property, options are: 'right', 'left' & 'center'" );			}else{				_align = a;			}		}				private var relativeY:Number = -20;				public function set relativeYabove(above:Boolean):void		{			relativeY = (above? -20:40);		}				public function set delay( value:Number ):void {			_delay = value;			_timer.delay = value;		}				public function set hook( value:Boolean ):void {			//trace("  hook="+value);			_hookEnabled = value;		}				public function set hookSize( value:Number ):void {			_hookSize = value;		}				public function set cornerRadius( value:Number ):void {			_cornerRadius = value;		}				public function set colors( colArray:Array ):void {			_bgColors = colArray;		}				public function set autoSize( value:Boolean ):void {			_autoSize = value;		}				public function set border( value:Number ):void {			_border = value;		}				public function set borderSize( value:Number ):void {			_borderSize = value;		}				public function set tipHeight( value:Number ):void {			_defaultHeight = value;		}				/* End Getters / Setters */								/* Cosmetic */				private function textGlow( field:TextField ):void {			var color:Number = 0x000000;            var alpha:Number = 0.35;            var blurX:Number = 2;            var blurY:Number = 2;            var strength:Number = 1;            var inner:Boolean = false;            var knockout:Boolean = false;            var quality:Number = BitmapFilterQuality.HIGH;           var filter:GlowFilter = new GlowFilter(color,                                  alpha,                                  blurX,                                  blurY,                                  strength,                                  quality,                                  inner,                                  knockout);            var myFilters:Array = new Array();            myFilters.push(filter);        	field.filters = myFilters;		}				private function bgGlow():void {			var color:Number = 0x000000;            var alpha:Number = 0.20;            var blurX:Number = 5;            var blurY:Number = 5;            var strength:Number = 1;            var inner:Boolean = false;            var knockout:Boolean = false;            var quality:Number = BitmapFilterQuality.HIGH;           var filter:GlowFilter = new GlowFilter(color,                                  alpha,                                  blurX,                                  blurY,                                  strength,                                  quality,                                  inner,                                  knockout);            var myFilters:Array = new Array();            myFilters.push(filter);            filters = myFilters;		}				private function initTitleFormat():void {			_titleFormat = new TextFormat();			_titleFormat.font = "_sans";			_titleFormat.bold = true;			_titleFormat.size = 20;			_titleFormat.color = 0x333333;		}				private function initContentFormat():void {			_contentFormat = new TextFormat();			_contentFormat.font = "_sans";			_contentFormat.bold = false;			_contentFormat.size = 14;			_contentFormat.color = 0x333333;		}			/* End Cosmetic */						/* Helpers */				/* Check if font is a device font */		private function isDeviceFont( format:TextFormat ):Boolean {			var font:String = format.font;			var device:String = "_sans _serif _typewriter";			return device.indexOf( font ) > -1;			//_sans			//_serif			//_typewriter		}				private function setOffset():void {			switch( _align ){				case "left":					_offSet = - _defaultWidth +  ( _buffer * 3 ) + _hookSize; 					_hookOffSet = _defaultWidth - ( _buffer * 3 ) - _hookSize; 				break;								case "right":					_offSet = 0 - ( _buffer * 3 ) - _hookSize;					_hookOffSet =  _buffer * 3 + _hookSize;				break;								case "center":					_offSet = - ( _defaultWidth / 2 );					_hookOffSet =  ( _defaultWidth / 2 );				break;								default:					_offSet = - ( _defaultWidth / 2 );					_hookOffSet =  ( _defaultWidth / 2 );;				break;			}		}				/* End Helpers */								/* Clean */				private function cleanUp():void {			_parentObject.removeEventListener( MouseEvent.MOUSE_OUT, onMouseOut );			_stage.addEventListener( MouseEvent.MOUSE_UP, onMouseOut );			//_parentObject.removeEventListener( MouseEvent.MOUSE_MOVE, onMouseMovement );			follow( false );			_tf.filters = [];			filters = [];			removeChild( _tf );			_tf = null;			if( _cf != null ){				_cf.filters = []				removeChild( _cf );			}			graphics.clear();			_parentObject.stage.removeChild( this );		}				/* End Clean */				/* 		private function onMouseMovement( event:MouseEvent ):void {			var parentCoords:Point = new Point( _parentObject.mouseX, _parentObject.mouseY );			var globalPoint:Point = _parentObject.localToGlobal(parentCoords);			x = globalPoint.x - width;			y = globalPoint.y - height - 10;			event.updateAfterEvent();		}		*/									}}