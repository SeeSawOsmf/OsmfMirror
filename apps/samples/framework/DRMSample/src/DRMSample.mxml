<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	applicationComplete="{init()}"	
	layout="absolute"
	xmlns:players="com.adobe.strobe.players.*" 
	xmlns:flash="adobeTV.flash.*" xmlns:ui="ui.*">
		<mx:Script>
		<![CDATA[
			import ui.UpdateDialog;
			import ui.AuthDialog;
			import mx.managers.PopUpManager;
			import org.osmf.events.LoadableStateChangeEvent;
			import org.osmf.traits.ILoadable;
			import org.osmf.events.TraitEvent;
			import org.osmf.events.AuthenticationFailedEvent;
			import org.osmf.traits.ContentProtectableTrait;
			import org.osmf.traits.IContentProtectable;
			import org.osmf.traits.MediaTraitType;
			import org.osmf.events.TraitsChangeEvent;
			import org.osmf.utils.MediaFrameworkStrings;
			import org.osmf.metadata.ObjectIdentifier;
			import org.osmf.metadata.MetadataNamespaces;
			import org.osmf.metadata.KeyValueFacet;
			import org.osmf.utils.URL;
			import org.osmf.media.URLResource;
			import org.osmf.net.NetLoader;
			import org.osmf.video.VideoElement;
			import mx.controls.videoClasses.VideoError;
			import flash.net.drm.DRMVoucher;
			import mx.rpc.events.ResultEvent;
			import mx.messaging.Producer;
			import flash.net.drm.LoadVoucherSetting;
			import flash.net.drm.DRMContentData;
			import flash.net.drm.DRMManager;
			
			private var connection:NetConnection = new NetConnection();
			private var stream:NetStream;
			private var video:Video;
						
			private var voucherLoader:URLLoader;
			private var contentData:DRMContentData;
			
			private function init():void
			{	
				/*
				updater.addEventListener(Event.OPEN, startUpdate);
				updater.addEventListener(Event.CANCEL, finishUpdate);
				updater.addEventListener(IOErrorEvent.IO_ERROR, finishUpdate);
				updater.addEventListener(SecurityErrorEvent.SECURITY_ERROR, finishUpdate);
				updater.addEventListener(Event.COMPLETE, finishUpdate);
				*/	
				
							
				voucherLoader = new URLLoader();
				voucherLoader.dataFormat = URLLoaderDataFormat.BINARY;
				voucherLoader.addEventListener(Event.COMPLETE, onComplete);
				voucherLoader.load(new URLRequest("http://flipside.corp.adobe.com/testing/oconnell/videos/drm/GITS_1_3m.mp4"));
			}
			
			private function onComplete(event:Event):void
			{
				var data:ByteArray = new ByteArray();
				data.writeBytes(voucherLoader.data);
				var facet:KeyValueFacet = new KeyValueFacet(MetadataNamespaces.DRM_METADATA);
				facet.addValue(new ObjectIdentifier(MediaFrameworkStrings.DRM_CONTENT_METADATA_KEY), data);
				
				var resource:URLResource = new URLResource(new URL('http://flipside.corp.adobe.com/testing/oconnell/videos/drm/GITS_1_3.mp4'));
				resource.metadata.addFacet(facet);
				
				createElement(resource);
				
			}
			
			private function onAuthNeeded(event:TraitEvent):void
			{
				trace('auth needed');
				//"dmo"
				//"password"
			
				var authDialog:AuthDialog = new AuthDialog();
				authDialog.trait = (playerContainer.element.getTrait(MediaTraitType.CONTENT_PROTECTABLE) as IContentProtectable);
				PopUpManager.addPopUp(authDialog, this);
			}
			
			private function onAuthenticationComplete(event:TraitEvent):void
			{
				trace('auth complete');
			}
			
			private function onAuthenticationError(event:AuthenticationFailedEvent):void
			{
				trace('auth error' + event.errorID);
			}
							
			private function createElement(resource:URLResource):void
			{							
				var elem:VideoElement = new VideoElement(new NetLoader(), resource);
				elem.addEventListener(TraitsChangeEvent.TRAIT_ADD, onTrait);
				(elem.getTrait(MediaTraitType.LOADABLE) as ILoadable).addEventListener(LoadableStateChangeEvent.LOADABLE_STATE_CHANGE, loadChange);
				playerContainer.mediaPlayer.autoPlay = true;
				playerContainer.element = elem;		
			}			
			
			private function onTrait(event:TraitsChangeEvent):void
			{
				if (event.traitType == MediaTraitType.CONTENT_PROTECTABLE)
				{
					var trait:ContentProtectableTrait = ContentProtectableTrait(event.media.getTrait(event.traitType));
					trait.addEventListener(AuthenticationFailedEvent.AUTHENTICATION_FAILED, onAuthenticationError);
					trait.addEventListener(TraitEvent.AUTHENTICATION_NEEDED, onAuthNeeded);
					trait.addEventListener(TraitEvent.AUTHENTICATION_COMPLETE, onAuthenticationComplete);
				}
			}
						
			private function loadChange(event:Event):void
			{
				trace('loadStateChange');
			}
			
			private function startUpdate(event:Event):void
			{
				trace('starting update');
				update = new UpdateDialog();
				PopUpManager.addPopUp(update, this);
			}
			
			private function finishUpdate(event:Event):void
			{
				trace('starting update');
				PopUpManager.removePopUp(update);
			}
								
			private function play():void
			{				
				if(playerContainer.mediaPlayer.playing)
				{
					playerContainer.mediaPlayer.pause();
				}
				else
				{
					playerContainer.mediaPlayer.play();
				}
			} 
			
			private var update:UpdateDialog;
		]]>
	</mx:Script>
		
	<ui:Controls
		width="100%"
		height="100%"
		mediaPlayer="{playerContainer.mediaPlayer}"
		bottom="10" />
	<ui:RegionComponent
		left="0"
		right="0"
		top="0"
		bottom="100"		
		id="playerContainer"
		/>
</mx:Application>
