/*****************************************************
*  
*  Copyright 2009 Adobe Systems Incorporated.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Adobe Systems Incorporated.
*  Portions created by Adobe Systems Incorporated are Copyright (C) 2009 Adobe Systems 
*  Incorporated. All Rights Reserved. 
*  
*****************************************************/
package org.osmf.elements.f4mClasses
{
	import __AS3__.vec.Vector;
	
	import flash.utils.ByteArray;
	
	import flexunit.framework.TestCase;
	
	import mx.utils.Base64Decoder;
	import mx.utils.Base64Encoder;
	
	import org.osmf.media.DefaultMediaFactory;
	import org.osmf.media.MediaFactory;
	import org.osmf.media.MediaResourceBase;
	import org.osmf.media.URLResource;
	import org.osmf.metadata.Metadata;
	import org.osmf.metadata.MetadataNamespaces;
	import org.osmf.net.DynamicStreamingItem;
	import org.osmf.net.DynamicStreamingResource;
	import org.osmf.net.StreamType;
	import org.osmf.net.StreamingURLResource;

	public class TestManifestParser extends TestCase
	{
		private var parser:ManifestParser = new ManifestParser();
		
		public function testDefaults():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
							</manifest>;
			var parser:ManifestParser = new ManifestParser();
			var manifest:Manifest = parser.parse(test);
			assertEquals(manifest.id, "myvideo");
			assertEquals(manifest.duration, NaN);
			assertEquals(manifest.media.length, 0);
			assertEquals(manifest.streamType, null);	
			assertEquals(manifest.mimeType, null);					
		}
		
		public function testNoURL():void
		{
			
			var errorSeen:Boolean = false;
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<startTime>2009-11-29T21:53:12-08:00</startTime>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<deliveryType>streaming</deliveryType>
								<media  bitrate="408" width="640" height="480"/>
								<media url="rtmp://example.com/myvideo/medium" bitrate="908" width="800" height="600"/>
								<media url="rtmp://example.com/myvideo/high" bitrate="1708" width="1920" height="1080"/>
							</manifest>;
			try
			{
				var manifest:Manifest = parser.parse(test);			
			}
			catch(error:ArgumentError)
			{
				errorSeen = true;
			}
			assertTrue(errorSeen);
		}
		
		public function testNoProfile():void
		{
			var errorSeen:Boolean = false;
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<startTime>2009-11-29T21:53:12-08:00</startTime>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<deliveryType>streaming</deliveryType>
								<bootstrapInfo url="/mybootstrapinfo"/>
								<media url="http://example.com/myvideo/low" bitrate="408" width="640" height="480"/>
								<media url="http://example.com/myvideo/medium" bitrate="908" width="800" height="600"/>
								<media url="http://example.com/myvideo/high" bitrate="1708" width="1920" height="1080"/>
							</manifest>;
			try
			{
				var manifest:Manifest = parser.parse(test);			
			}
			catch(error:ArgumentError)
			{
				errorSeen = true;
			}
			assertTrue(errorSeen);
			
		}
		
		public function testNoBitrate():void
		{
			var errorSeen:Boolean = false;
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<startTime>2009-11-29T21:53:12-08:00</startTime>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052">AgARfEFkZGl0aW9uYWxIZWFkZXIDAApFbmNyeXB0aW9uAwAHVmVyc2lvbgBAAAAAAAAAAAAGTWV0aG9kAgAIU3RhbmRhcmQABUZsYWdzAAAAAAAAAAAAAAZQYXJhbXMDAAdWZXJzaW9uAD/wAAAAAAAAABNFbmNyeXB0aW9uQWxnb3JpdGhtAgAHQUVTLUNCQwAQRW5jcnlwdGlvblBhcmFtcwMACUtleUxlbmd0aABAMAAAAAAAAAAACQAHS2V5SW5mbwMAB3N1YlR5cGUCAA1GbGFzaEFjY2Vzc3YyAA5GTVJNU19NRVRBREFUQQMACE1ldGFkYXRhAi/wTUlJajdnWUpLb1pJaHZjTkFRY0NvSUlqM3pDQ0k5c0NBUUV4Q3pBSkJnVXJEZ01DR2dVQU1JSVRuZ1lKS29aSWh2Y05BUWNCb0lJVGp3U0NFNHN3Z2hPSEFnRUNNSUlOQkRDQ0RRQUNBUUVDQVFFRUpFSkNNRU14UXpGR0xUbEVRVUl0TXpZME1TMUJNa00wTFRWRlJEQXlRVFF6T1RJMlFnU0NEQ1JRUkRrMFlsZDNaMlJ0Vm5sak1teDJZbW93YVUxVE5IZEphVUpzWW0xT2RscEhiSFZhZWpCcFZsWlNSMHhVWjJsSlNFNHdXVmMxYTFsWGVIWmliVlU1U1c1c2JHTjVTUzlRWjI4NFZVYzVjMkZYVGpWSlNHaDBZa2MxZWxCVFNtOWtTRkozVDJrNGRtUXpaRE5NYlVacllqSktiRXh0VG5aaVV6bDZXVEpvYkdKWFJYWk5VelIzVEROQ2EyTnRkMmxRYW5oMVkzcEZObEV5T1hWak0xSjVXVmRzZFdSRFFrUmlNalY2WkVoS2FHRlhOVEJVYlVaMFdsUXdhVkV5Um1waFIxWkZaRmhLYUdSSGJIWmlhVWxuWlVjeGMySnVUVGxKYldnd1pFaEJOa3g1T1ROa00yTjFXVmRTZGxsdFZYVlpNamwwVERKYWMxbFlUbTlaVjA1cVdsaE9la3d6V1hoSmFVSTBZbGQ0ZFdONmNIVmpla1U1U1cxb01HUklRVFpNZVRrelpETmpkVmxYVW5aWmJWVjFXVEk1ZEV3elRtcGhSMVowV1ZNNGVFeHFRWFpqUjFKNVlrTkpLMUJITlhwTlZIQlJZMjA1ZDFwWVNqQmxVMEpSWTIwNWQxcFlTakJsVlRWb1lsZFZPVWx0VG5saFdGSndXVEpHYzBscU5EaGliazE0VDJ4Q2VXSXpRbXhqYmxJMVZtMUdjMlJYVlN0a1NFb3hXbFIzZG1KdVRYaFBiRUo1WWpOQ2JHTnVValZXYlVaelpGZFZLMUJET1hWamVrVTJWVWhLZG1OSFZubGtTR3NyVUVjMWVrMVVjRkZqYlRsM1dsaEtNR1ZUUWxGamJUbDNXbGhLTUdWVk5XaGlWMVU1U1c1T2JGa3lPWFZhU0UxcFVHcDRkV042UlRaVlNFcDJZMGRXZVdSSWJGZFpWM2d4V2xRME1FMXFRVGhNTWpWNlRWUndVV050T1hkYVdFb3daVlphYUdKSVZteFFhbmQyWW01TmVFOXNRbmxpTTBKc1kyNVNOVkJxZDNaaWJrMTRUMnRPZG1KdVRqQmpiVVp3WW01UksxQkhOWHBOYW5CRVlqSTFlbVJJU21oaFZ6VXdTVVZPZG1KdVRqQmpiVVp3WW01U1QxbFhNV3hRVTBwRVlqSTFNRnBYTlRCU1NGWjVXVmhTY0dJeU5HbEpTR2gwWWtjMWVsQlRTbTlrU0ZKM1QyazRkbVF6WkROTWJVWnJZakpLYkV4dFRuWmlVemx0WWtkR2VtRkhSbXBaTWxaNlkzazVNazFUU1dkbFJ6RnpZbTVOTm1KdVRYbFFVMHB2WkVoU2QwOXBPSFprTTJRelRHMUdhMkl5U214TWJVNTJZbE01ZWxreWFHeGlWMFYyVFZNMGQwd3pRbXRqYlhkcFVHcDRkV042U1RaVlNFcDJZMGRXZVdSSWEyZFZTRXAyWTBkV2VXUkliRTlaVnpGc1VGTkthbU50YkRCaFYwNW9Za05KSzFCSE5YcE5hbkJSWTIwNWQxcFlTakJsVmxwb1lraFdiRkJ1VW5sa1YxVTRUREkxZWsxcWNGRmpiVGwzV2xoS01HVldXbWhpU0Zac1VHcDNkbUp1VFhsUGJFSjVZak5DYkdOdVVqVlFhbmgxWTNwSk5sVklTblpqUjFaNVpFaHJaMVZJU25aalIxWjVaRWhzVDFsWE1XeFFVMHA2V2xkT2RtSnRVbnBKYWpRNFltNU5lVTlzUW5saU0wSnNZMjVTTlZadFJuTmtWMVVyVDBSWk1FMUVRWGROUkVFNFRESTFlazFxY0ZGamJUbDNXbGhLTUdWV1dtaGlTRlpzVUdwM2RtSnVUWGxQYkVKNVlqTkNiR051VWpWUWFuZDJZbTVOZVU5clRuWmliazR3WTIxR2NHSnVVU3RRUnpWNlRYcHdSR0l5Tlhwa1NFcG9ZVmMxTUVsRlRuWmliazR3WTIxR2NHSnVVazlaVnpGc1VGTktRMkZYTld0V1J6bE9XVmRPYjJGWE5XeEphVUkwWWxkNGRXTjZNR2xoU0ZJd1kwUnZka3d6WkROa2VUVm9Xa2M1YVZwVE5XcGlNakIyV20xNGFHTXlhR2haTWs1c1l6Tk5kbVJxUldsSlNHaDBZa2MxZWs5dE5YcE5lakJwWVVoU01HTkViM1pNTTJRelpIazFhRnBIT1dsYVV6VnFZakl3ZG1NeVRtOWFWekZvVEhwRmRVMURPWGRhU0VwelNXbzBPR0p1VFhwUGJFSjVZak5DYkdOdVVqVkpSa0o1WWpOQ2JHTnVValZVYlVaMFdsUXdhVmt6U25Ca1IyeHFXVmQzYVZCcWVIVmplazAyVlVoS2RtTkhWbmxrU0d4WFdWZDRNVnBVTlRCamJsWnNVRU01ZFdONlRUWlZTRXAyWTBkV2VXUkliRmRaVjNneFdsUTBPRXd5TlhwTmVuQlJZMjA1ZDFwWVNqQmxWRFE0VERJMWVrMTZjRVJpTWpWNlpFaEthR0ZYTlRCUWFuaFJZako0Y0ZremJFWmlibEo1WlZRME9GVklTbkJpYlU1d1kwZEdjMGxHUW5saFZ6VnFZVmhDYUdKRk5XaGlWMVpWWlZoQ2JGQlRTbFJYVms1VlVsVXdhVkJxZUZGamJXeDFXVEpzZDFsWGVFVmlNakZvWVZjMEsxSnRlR2hqTW1oQ1dUSk9iR016VFRoTU1VSjVZVmMxYW1GWVFtaGlSVkoyWWxkR2NHSnFORGhWU0Vwd1ltMU9jR05IUm5OVWJVWjBXbFExYldKSFJucGhSMFpxV1RKV2VtTjZkM1pWU0Vwd1ltMU9jR05IUm5OVWJVWjBXbFEwT0V3eFFubGhWelZxWVZoQ2FHSkVORGhpYmswd1QyeENiR050TVhCak0wNXdZakkwWjFGWFRtcGFXRTU2VUZOS1FsUkZlRkJXZVVsblZVZFdlV0pYYkhwak1teDJZbXMxYUdKWFZUbEpiVTUyWWxNMWFGcEhPV2xhVXpWdFlrZEdlbUZIUm1wWk1sWjZZM2sxZVdGWFpHOWtTRTExWTBkNGFHVlRTV2RsUnpGelltNU5PVWx0YURCa1NFRTJUSGs1TTJRelkzVlpWMUoyV1cxVmRWa3lPWFJNTWxweldWaE9iMWxYVG1wYVdFNTZURE5aZUVscFFqUmlWM2gxWTNwd2RXTjZVVGxKYldnd1pFaEJOa3g1T1ROa00yTjFXVmRTZGxsdFZYVlpNamwwVEROT2FtRkhWblJaVXpoNFRHcEJkbU5IVW5saVEwbDJVR3A0ZFdONlZUWlZSMVo1WWxkc2VtTXliSFppYVVKQ1dUSk9iR016VFRsSmEwWk5WRVU1V0VscFFsRmFXRXAwWVZoT2VtRlhPWFZVYlVaMFdsUXdhVmt5T1hSTWJVWnJZakpLYkV4dFduTlpXRTV2V1ZkT2FscFlUbnBNYmtwd1dqSm9NR041TldoalNFSnpZVmRPYUdSSGJIWmlhMUpzV20xc2RWcFhVV2xKU0doMFlrYzFlbEJUU205a1NGSjNUMms0ZG1RelpETk1iVVpyWWpKS2JFeHRUblppVXpsdFlrZEdlbUZIUm1wWk1sWjZZM2s1TWsxVFNXZGxSekZ6WW01Tk5tSnVUVEZRVTBwdlpFaFNkMDlwT0haa00yUXpURzFHYTJJeVNteE1iVTUyWWxNNWVsa3lhR3hpVjBWMlRWTTBkMHd6UW10amJYZHBVR3A0ZFdONlZUWlJNamwxWXpOU2VWbFhiSFZrUTBKRVlqSTFlbVJJU21oaFZ6VXdWRzFHZEZwVU1HbFJXRUozWWtkc2FsbFlVbkJpTWpWUlkyMDVkMk41U1N0UVJ6VjZUbFJ3VVdOdE9YZGFXRW93WlZOQ1VXTnRPWGRhV0Vvd1pWVTFhR0pYVlRsSmJVNTVZVmhTY0ZreVJuTkphalE0WW01Tk1VOXNRbmxpTTBKc1kyNVNOVlp0Um5Oa1YxVXJaRWhLTVZwVWQzWmliazB4VDJ4Q2VXSXpRbXhqYmxJMVZtMUdjMlJYVlN0UVF6bDFZM3BWTmxWSVNuWmpSMVo1WkVocksxQkhOWHBPVkhCUlkyMDVkMXBZU2pCbFUwSlJZMjA1ZDFwWVNqQmxWVFZvWWxkVk9VbHVRbk5aV0d4cFdWZE9jbFJYT1d0YVUwa3JVRWMxZWs1VWNGRmpiVGwzV2xoS01HVldXbWhpU0Zac1VHeHNXR1ZJVFRoTU1qVjZUbFJ3VVdOdE9YZGFXRW93WlZaYWFHSklWbXhRYW5kMlltNU5NVTlzUW5saU0wSnNZMjVTTlZCcWVIVmplbFUyVlVoS2RtTkhWbmxrU0d0blZVaEtkbU5IVm5sa1NHeFBXVmN4YkZCVFNsUmlNMVoxV2tOQ2RscHBRblppYlZWbllVZEdkVnBEUW1waVIwWjNZMGRzZFZwNVNTdFFSelY2VGxSd1VXTnRPWGRhV0Vvd1pWWmFhR0pJVm14UWFrRTRUREkxZWs1VWNGRmpiVGwzV2xoS01HVldXbWhpU0Zac1VHcDNkbUp1VFRGUGJFSjVZak5DYkdOdVVqVlFhbmgxWTNwVk5sVklTblpqUjFaNVpFaHJaMVZJU25aalIxWjVaRWhzVDFsWE1XeFFVMHBVWWtkc2QyTkhWbmxsVTBrclVFYzFlazVVY0ZGamJUbDNXbGhLTUdWV1dtaGlTRlpzVUd4VmVXVklXbXBTTVZwdFZrVmtWMDFGYjNwVWJWcFRZbFZhZWxscldUVlNWMGw2V2toV1dVMUhkM2RRUXpsMVkzcFZObFZJU25aalIxWjVaRWhzVjFsWGVERmFWRFE0VERJMWVrNVVjRkZqYlRsM1dsaEtNR1ZVTkRoaWJrMHhUMnhDZVdJelFteGpibEkxU1VaQ2VXSXpRbXhqYmxJMVZHMUdkRnBVTUdsU01teG9ZbTVSYVZCcWVIVmplbFUyVlVoS2RtTkhWbmxrU0d4WFdWZDRNVnBVTlZaTk1Wb3pWMnhvUzFKWFVsbFJiWGhxWWtWS2IxbHRNVk5oUkhkMlltNU5NVTlzUW5saU0wSnNZMjVTTlZadFJuTmtWMVVyVUVNNWRXTjZWVFpWU0VwMlkwZFdlV1JJYXl0UVJ6VjZUbFJ3VVdOdE9YZGFXRW93WlZOQ1VXTnRPWGRhV0Vvd1pWVTFhR0pYVlRsSmF6VndZbTF3YUVscU5EaGliazB4VDJ4Q2VXSXpRbXhqYmxJMVZtMUdjMlJYVlN0VmFrcEhZMFp3U0ZadVZsbGxhMnh2VUVNNWRXTjZWVFpWU0VwMlkwZFdlV1JJYkZkWlYzZ3hXbFEwT0V3eU5YcE9WSEJSWTIwNWQxcFlTakJsVkRRNFRESTFlazVVY0VSaU1qVjZaRWhLYUdGWE5UQlFhbmQyWW01Tk1VOXNRbXhqYlRGd1l6Tk9jR0l5TkN0UVF6bFJZako0Y0ZremJFWmlibEo1WlZRME9Fd3hRblppUjJ4cVpWUTBTME5uUFQyZ0Nnd0lNaTR3TGpBek5UU2hDd3dKUVc1dmJubHRiM1Z6b3pJeE1EQXVEQ3BqYjIwdVlXUnZZbVV1Wm14aGMyaGhZMk5sYzNNdVlYUjBjbWxpZFhSbGN5NWhibTl1ZVcxdmRYTXhBS1ZkTVZzd0NRd0ZSVzF3ZEhreEFEQVBEQVZHY25WcGRERUdCQVJOYjIxdk1CQU1CRVpwYzJneENBUUdUV0ZuZFhKdk1CSU1CRTFsWVhReENnUUlWRzl1YTJGMGMzVXdGd3dKVm1WblpYUmhZbXhsTVFvRUNGbGhiV0VnU1cxdk1ZSUU4VENDQk8weEpnd2thSFIwY0RvdkwyWnRjekZxTURBNVpDNWpiM0p3TG1Ga2IySmxMbU52YlRvNE1Ea3dNSUlFd1RDQ0E2bWdBd0lCQWdJUUpNbEs3Q2Z0U1JYSjdGbGJHeFFRdHpBTkJna3Foa2lHOXcwQkFRc0ZBREJiTVFzd0NRWURWUVFHRXdKVlV6RWpNQ0VHQTFVRUNoTWFRV1J2WW1VZ1UzbHpkR1Z0Y3lCSmJtTnZjbkJ2Y21GMFpXUXhKekFsQmdOVkJBTVRIa1pzWVhOb0lFRmpZMlZ6Y3lCQ2IyOTBjM1J5WVhBZ1ZFVlRWQ0JEUVRBZUZ3MHdPVEE1TWprd01EQXdNREJhRncweE1UQTVNamt5TXpVNU5UbGFNSUdMTVFzd0NRWURWUVFHRXdKVlV6RXdNQzRHQTFVRUNoUW5RMjl0Y0dGdWVVNWhiV1V0VkhKaGJuTndiM0owTFZCeWIyUXRNakF3T1RBNU1qa3dNRFUzTVEwd0N3WURWUVFMRkFSRVpYQjBNUkl3RUFZRFZRUUxGQWxVY21GdWMzQnZjblF4SnpBbEJnTlZCQU1USGtOdmJYQmhibmxPWVcxbExWUnlZVzV6Y0c5eWRDMVFjbTlrTFRJd01EQ0JuekFOQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUE3VVM1dE5jUDNkaHZJTC9CREdzMlhMV1ZiNDBkZjA4R0tXd1U0WWlxVElFdXNraUxPdXZNYnNrWXBHRmJNS21EV2lFMU9Ia3MwQnJuVFlIYXRVcWRsb3dCc1FSYmd4ZXp2b3RGMmZ5Vlg1Y0FsTjdHQzh6cjN6ZlZCdFVZZW1KVGgwVDk4bkhCLzN2R2hYM3AySTkvSFJvUHZXMUkwVEQrMnd3cjk2YUNhTTBDQXdFQUFhT0NBZEl3Z2dIT01HNEdBMVVkSHdSbk1HVXdZNkJob0YrR1hXaDBkSEE2THk5d2FXeHZkRzl1YzJsMFpXTnliQzUyWlhKcGMybG5iaTVqYjIwdlFXUnZZbVZUZVhOMFpXMXpTVzVqYjNKd2IzSmhkR1ZrVWsxVFEzVnpkRzl0WlhKQ2IyOTBjM1J5WVhBdlRHRjBaWE4wUTFKTUxtTnliREFMQmdOVkhROEVCQU1DQkxBd2dlUUdBMVVkSUFTQjNEQ0IyVENCMWdZS0tvWklodmN2QXdrQUFUQ0J4ekF5QmdnckJnRUZCUWNDQVJZbWFIUjBjRG92TDNkM2R5NWhaRzlpWlM1amIyMHZaMjh2Wm14aGMyaGhZMk5sYzNOZlkzQXdnWkFHQ0NzR0FRVUZCd0lDTUlHREdvR0FWR2hwY3lCalpYSjBhV1pwWTJGMFpTQm9ZWE1nWW1WbGJpQnBjM04xWldRZ2FXNGdZV05qYjNKa1lXNWpaU0IzYVhSb0lIUm9aU0JCWkc5aVpTQkdiR0Z6YUNCQlkyTmxjM01nUTFCVElHeHZZMkYwWldRZ1lYUWdhSFIwY0RvdkwzZDNkeTVoWkc5aVpTNWpiMjB2WjI4dlpteGhjMmhoWTJObGMzTmZZM0F3SHdZRFZSMGpCQmd3Rm9BVW9PWUorcHN0T09TV0w5ei8wZE8rNW1neG9oRXdIUVlEVlIwT0JCWUVGRHpZaDB1Vktxb1kxTjMrenNwaG92cUVLazNiTUJVR0ExVWRKUVFPTUF3R0NpcUdTSWIzTHdNSkFUY3dFUVlLS29aSWh2Y3ZBd2tDQlFRREFnRUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFGSVhmZGY0M1kzRDRuaUZTMnl1RER4cWJHRlphR0hEZFB0ak5GS1cwQy8wSmV5M3ZFKzMwaDdCRUZXU1BtTUphL09mQ2trSE52ZjBic1YvTDZ1QmxkQUhzb2Rmdi9FOGtKUld3cVM0bHEvR0N6VnBKMHR3RklINUd1NFM0aVFjWS9nNCtHblhpUkxFQXJQREc4Vi94blZjUVErOWV1NVkxQ09hOHZzTDdKK0FZWEdDRkIyQWtvQlZFTDVTOEtuQTJQUWVRakpQTmJQWjNCQ2Y1bDFGR2NveFlid0Nnc1IzcENZWTdtYlhESmp0RFZ2MXZJelp4OUFyOGZwZ01PKzNsZGo2MS9kNnVaVTdHd0piNFRxZWxNRm92MjNtTTF3MWVRTU4rQlNaWDZhYkxoMmNPdGhNWG1ZeW1VcVhHVG53NWMySGRkYTkyNWNRajFPNEMvMkpFa01JSDBCQWxaV0Zwb1pFZEdlUUFZRHpJd01UQXdNVEkzTURRMU5qVTVXZ1NCZ0lQTEpWYlZwTlR0VmNVbXlLdDM0UlU5ZkdEWG9SbGJGYm5JRFpUaTJMSDNONG11VnE0b1JIMC9udkN3UVVWdk9ETmtZdVRlb0orZk4vaDRTLzhHbHZVN2JXR2xOKzQ2c3N3M3F3VEorZXE1SDFXcFcxQXlML2ViNlQ2Y0ZjaktZTjFsdUhrM1pvUXBtTWVkS24rK2VkMFNLQlE5dFNNU2dWNXlRNTkycW5Jdk1DRUdDU3FHU0liM0x3TUlBZ1FVcEVKSWszOUw4NWR2cGd0VTJtcFpKY0E0Zy91Z0NBUUdZWFpoZEdGeW9TWU1KR2gwZEhBNkx5OW1iWE14YWpBd09XUXVZMjl5Y0M1aFpHOWlaUzVqYjIwNk9EQTVNREJ2TUZzeEN6QUpCZ05WQkFZVEFsVlRNU013SVFZRFZRUUtFeHBCWkc5aVpTQlRlWE4wWlcxeklFbHVZMjl5Y0c5eVlYUmxaREVuTUNVR0ExVUVBeE1lUm14aGMyZ2dRV05qWlhOeklFSnZiM1J6ZEhKaGNDQlVSVk5VSUVOQkFoQUtnQjkwRmhuNmdwK2lkbTlYMEttSW9CME1Hekl1TUM0eU1ERXdNREV5TnpBME5UWTFPWHBmVWtWTVJVRlRSYUNDRHEwd2dnU2pNSUlEaTZBREFnRUNBaEFLZ0I5MEZobjZncCtpZG05WDBLbUlNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Gc3hDekFKQmdOVkJBWVRBbFZUTVNNd0lRWURWUVFLRXhwQlpHOWlaU0JUZVhOMFpXMXpJRWx1WTI5eWNHOXlZWFJsWkRFbk1DVUdBMVVFQXhNZVJteGhjMmdnUVdOalpYTnpJRUp2YjNSemRISmhjQ0JVUlZOVUlFTkJNQjRYRFRBNU1Ea3lPVEF3TURBd01Gb1hEVEV4TURreU9USXpOVGsxT1Zvd2JqRUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlZCQW9VQzBOdmJYQmhibmxPWVcxbE1RMHdDd1lEVlFRTEZBUkVaWEIwTVJFd0R3WURWUVFMRkFoUVlXTnJZV2RsY2pFbk1DVUdBMVVFQXhNZVEyOXRjR0Z1ZVU1aGJXVXRVR0ZqYTJGblpYSXRVSEp2WkMweU1EQTVNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUFBNEdOQURDQmlRS0JnUUR0WTZwdUV3RlZvMTRORVhid0RYSWhkVUFJVjdKMUFPaUo0QTNReTB4aWlUenA3MHplL290SUo3aGtaWlFWcU8yK0tNVG5STUNlUmVPUFMzclB0TjJ4Rmh6VWk3Q2w5cnBBSU91S0JoU29BaXZhSVgrUXRXYmliV24zT0dxK2tGYk9YNHRtOHVTU0pHbGxFS1ZhcnBPeDVxdnJXSDZwb3pJQUlRWTBXL2VTd1FJREFRQUJvNElCMGpDQ0FjNHdiZ1lEVlIwZkJHY3daVEJqb0dHZ1g0WmRhSFIwY0RvdkwzQnBiRzkwYjI1emFYUmxZM0pzTG5abGNtbHphV2R1TG1OdmJTOUJaRzlpWlZONWMzUmxiWE5KYm1OdmNuQnZjbUYwWldSU1RWTkRkWE4wYjIxbGNrSnZiM1J6ZEhKaGNDOU1ZWFJsYzNSRFVrd3VZM0pzTUFzR0ExVWREd1FFQXdJRXNEQ0I1QVlEVlIwZ0JJSGNNSUhaTUlIV0Jnb3Foa2lHOXk4RENRQUJNSUhITURJR0NDc0dBUVVGQndJQkZpWm9kSFJ3T2k4dmQzZDNMbUZrYjJKbExtTnZiUzluYnk5bWJHRnphR0ZqWTJWemMxOWpjRENCa0FZSUt3WUJCUVVIQWdJd2dZTWFnWUJVYUdseklHTmxjblJwWm1sallYUmxJR2hoY3lCaVpXVnVJR2x6YzNWbFpDQnBiaUJoWTJOdmNtUmhibU5sSUhkcGRHZ2dkR2hsSUVGa2IySmxJRVpzWVhOb0lFRmpZMlZ6Y3lCRFVGTWdiRzlqWVhSbFpDQmhkQ0JvZEhSd09pOHZkM2QzTG1Ga2IySmxMbU52YlM5bmJ5OW1iR0Z6YUdGalkyVnpjMTlqY0RBZkJnTlZIU01FR0RBV2dCU2c1Z242bXkwNDVKWXYzUC9SMDc3bWFER2lFVEFkQmdOVkhRNEVGZ1FVWThRNjlVVzgrTlhPY3dMc2wrelpQWEYrQTVvd0ZRWURWUjBsQkE0d0RBWUtLb1pJaHZjdkF3a0JOakFSQmdvcWhraUc5eThEQ1FJRkJBTUNBUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJ4UFV6c2pBZ0dVb1VlRnBQUUNpOG1QYTlBMmZnenlDRTZ4VWVNU2h4eDhUVFRSTzNUV0cvc1ZtTmRxKzZnVFh2SGFkR2NvNW9UYlFiaXdFV0doTWZzZzY2YytWRkdZRzlIeG5mcXAvaExyRXN0cENOeVEvYWVjRHNxYkJCb3VJWlN0ZndZOG9wQ28zZjQ3ODdJOFFNVVNLalpsSGFVMzVvMDA1L0gwOURTZkM1dTJ1ZzVnMjBUbnFFZmpJRUFtaklXRSszOTJQNzNsYVl2Y2tGU0xqOXU0dytUMUZTVmg4T3BHRlhnbzhKWHFsWlg1Z2pjRCtoVXJsOE5kbDdMUHd3STJhRFRHeFhRMktHRWZlMmpRYklmcS9rQmorcjZTYWdyall3ZXN4V1lUbnV0Yi8vN2JrQS9JT2FUaHVZVE5ZbG1aZXREbUk2cTVtbU9GaldjaXE4VXdnZ1R0TUlJRDFhQURBZ0VDQWhCNDFGTlZSR2prblk2NWhrdjFJYm91TUEwR0NTcUdTSWIzRFFFQkN3VUFNRll4Q3pBSkJnTlZCQVlUQWxWVE1TTXdJUVlEVlFRS0V4cEJaRzlpWlNCVGVYTjBaVzF6SUVsdVkyOXljRzl5WVhSbFpERWlNQ0FHQTFVRUF4TVpSbXhoYzJnZ1FXTmpaWE56SUZSRlUxUWdVbTl2ZENCRFFUQWVGdzB3T1RBMk16QXdNREF3TURCYUZ3MHlPVEEyTWpreU16VTVOVGxhTUY0eEN6QUpCZ05WQkFZVEFsVlRNU013SVFZRFZRUUtFeHBCWkc5aVpTQlRlWE4wWlcxeklFbHVZMjl5Y0c5eVlYUmxaREVxTUNnR0ExVUVBeE1oUm14aGMyZ2dRV05qWlhOeklGUkZVMVFnU1c1MFpYSnRaV1JwWVhSbElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTZsYVQ5RHBkb1NqQ0gzRHpuMjAyOEl1Q3NYRUdhUkpWOWNIQ2Rqa21VempRRFhoU1g4UGYyYkNxQnRzMmlOSncyRDQzQXUzdHVNZW5tbHRCdXhMNnpHRlA4SFdJcFVGNDUrU240NVpHZWhnOVE5VnV2WXp2MlMyVjZlQ05oYVpPalZjVEhFMW1zVndERkp5aGNTbTFTR2gwMDluWFhURGtKbi9WUURJNFBmRUgzcmwrdmNObHB1RmZaaGRxc1pGNkxHMWF3ci93TG9NRWMwbGpnQWJTQjltcjVvT1pmZWVkUTBIMnZjZ29URzdLcVRrejNocVEyb0xuN25Bc09yc2NQVnhZWStGd21SY3M4MVk0dzhNbEJ3Q09WelhNVTYwRERISzRFNTJDUEdCNHUxdDYrZzAvaHF1NVF2cmZ1TlEzUDhSNUM2SG9FN0EzWTdxUlZ6bzltUUlEQVFBQm80SUJyVENDQWFrd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFUQmNCZ05WSFI4RVZUQlRNRkdnVDZCTmhrdG9kSFJ3T2k4dmNHbHNiM1J2Ym5OcGRHVmpjbXd1ZG1WeWFYTnBaMjR1WTI5dEwwOW1abXhwYm1WRFFTOUJaRzlpWlVac1lYTm9RV05qWlhOelZFVlRWRkp2YjNSRFFTNWpjbXd3SFFZRFZSME9CQllFRkVOckRPalprUVltYndUVlJCSXFaRmpBa0p0VE1COEdBMVVkSXdRWU1CYUFGQTlwQXVybkpvRnJraHVUZWEzWTYvTDdCcGdkTUE0R0ExVWREd0VCL3dRRUF3SUJCakNCNUFZRFZSMGdCSUhjTUlIWk1JSFdCZ29xaGtpRzl5OERDUUFCTUlISE1ESUdDQ3NHQVFVRkJ3SUJGaVpvZEhSd09pOHZkM2QzTG1Ga2IySmxMbU52YlM5bmJ5OW1iR0Z6YUdGalkyVnpjMTlqY0RDQmtBWUlLd1lCQlFVSEFnSXdnWU1hZ1lCVWFHbHpJR05sY25ScFptbGpZWFJsSUdoaGN5QmlaV1Z1SUdsemMzVmxaQ0JwYmlCaFkyTnZjbVJoYm1ObElIZHBkR2dnZEdobElFRmtiMkpsSUVac1lYTm9JRUZqWTJWemN5QkRVRk1nYkc5allYUmxaQ0JoZENCb2RIUndPaTh2ZDNkM0xtRmtiMkpsTG1OdmJTOW5ieTltYkdGemFHRmpZMlZ6YzE5amNEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFqWXNMUExTRXlEQlVXQ3Z0SS9MYnJ5aUs1S1JYUEJuZ0dWZFd3cUJpZ2ZFNm5kZDdhOVd4T0xidEtoWXFEQUNzSVEvN282N29OY1dxNEM5dGJCRHFlOFdLN1lrWXQ0cnhMOUt3Vm0vZ1M4S3BzaWt3blNnZG5KeTNrUlJ6SlMyUWxVL3Zla1lUYncxcUkzbCtGTk1aenFQd2ZLMVhXeVBIZk5lYUlCNWs5cTdHUkRnbWZpcXZyS0drT1JEZEg2QlZXK0FyZDRZeHJza2pvQ2FIY295L2lmMWRsN1NnS2hRbmJmTkVrblFEUlJBR0gvRFRKOTYxYVd2bUtjQlZWMlp5aU1UcjdKcWt4WnBnMmFQa01BOTl0c2hjT2xpOUhKNDdNdis3RGhJazJVT1BGU3Z1aXBUV2xYcDhZbFNiSml3a21yclJ1QlRsNlI4U2dBZU84Vk5EWHpDQ0JSRXdnZ1A1b0FNQ0FRSUNFR2dmbm5hV2laNW1TczdUNkRVektWZ3dEUVlKS29aSWh2Y05BUUVMQlFBd1hqRUxNQWtHQTFVRUJoTUNWVk14SXpBaEJnTlZCQW9UR2tGa2IySmxJRk41YzNSbGJYTWdTVzVqYjNKd2IzSmhkR1ZrTVNvd0tBWURWUVFERXlGR2JHRnphQ0JCWTJObGMzTWdWRVZUVkNCSmJuUmxjbTFsWkdsaGRHVWdRMEV3SGhjTk1Ea3dOak13TURBd01EQXdXaGNOTWpRd05qSTRNak0xT1RVNVdqQmJNUXN3Q1FZRFZRUUdFd0pWVXpFak1DRUdBMVVFQ2hNYVFXUnZZbVVnVTNsemRHVnRjeUJKYm1OdmNuQnZjbUYwWldReEp6QWxCZ05WQkFNVEhrWnNZWE5vSUVGalkyVnpjeUJDYjI5MGMzUnlZWEFnVkVWVFZDQkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMdzRNcHlCYjdyalFOVXg0Q1lWWXZQd3FwYm9jU1l0VmQ0VExsK1A5VGE2RkFkSldMbkwvWGRaTjV1Y2NOWU1GSmUzUCtTWS9ZcnlBUmZMdk9VMTloUUJ4Zzc1UEVkTkFlNGx3TFk4L2hLWVMxcGZwZmZvUDNEdVkyYWtGdVdZT3gwOTE2aDNPcFZqNmdrZmNEeU15d21mVzlnaHhUb09VRDJTM3d0NldXNnB3S2VmVlBlblZGUFNOTzdPOWVCRGFKK3N6aVpXSjVyaWlTQkU2SGErZmtKOHFjUGFCNGNSWHk2K09MMmloRDF4RUh3RHExelIwM3RtenZ6cVNFYXVMdEZUVGE1QXFJcGY5YldPMk1oVWRJM2NaT3F3bzlzOC9zNXZZaDFKMWhHc3c0RWsrL1hiVkJ6MGRNQ2ZxWlJycmpkeXVGeVlMa1VKWHlwYnZ5RFVidzBDQXdFQUFhT0NBY3d3Z2dISU1HUUdBMVVkSHdSZE1Gc3dXYUJYb0ZXR1UyaDBkSEE2THk5d2FXeHZkRzl1YzJsMFpXTnliQzUyWlhKcGMybG5iaTVqYjIwdlQyWm1iR2x1WlVOQkwwRmtiMkpsUm14aGMyaEJZMk5sYzNOVVJWTlVTVzUwWlhKdFpXUnBZWFJsUTBFdVkzSnNNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlNnNWduNm15MDQ1Sll2M1AvUjA3N21hREdpRVRBZkJnTlZIU01FR0RBV2dCUkRhd3pvMlpFR0ptOEUxVVFTS21SWXdKQ2JVekFWQmdOVkhTVUVEakFNQmdvcWhraUc5eThEQ1FFQ01JSGtCZ05WSFNBRWdkd3dnZGt3Z2RZR0NpcUdTSWIzTHdNSkFBRXdnY2N3TWdZSUt3WUJCUVVIQWdFV0ptaDBkSEE2THk5M2QzY3VZV1J2WW1VdVkyOXRMMmR2TDJac1lYTm9ZV05qWlhOelgyTndNSUdRQmdnckJnRUZCUWNDQWpDQmd4cUJnRlJvYVhNZ1kyVnlkR2xtYVdOaGRHVWdhR0Z6SUdKbFpXNGdhWE56ZFdWa0lHbHVJR0ZqWTI5eVpHRnVZMlVnZDJsMGFDQjBhR1VnUVdSdlltVWdSbXhoYzJnZ1FXTmpaWE56SUVOUVV5QnNiMk5oZEdWa0lHRjBJR2gwZEhBNkx5OTNkM2N1WVdSdlltVXVZMjl0TDJkdkwyWnNZWE5vWVdOalpYTnpYMk53TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDbHowM3VPdG1DV2lhYXdUOXh3MDlad21SSDdXZEdiRjFndGhveGJwK2M0SjVPWDJ0KzVxWHpCK0EvblBxbHBsMGxNNEZLM3VzT01CU0hjYjRtYlJWOFNPSWgzUFdnN1p0U2ZwMGQ3UjlpQVZIM3ZhaVYwOUNSd2pVQVV0ekJxVk1jY2VyV3dKTDRVTm5sTHAxQTVIT3ZZcWxNREpiQXM0bjVuTjFWZUlsQ1k4bEZpNTVhUXlwamVtUXVrdmdWKzRIa1N6OTF0VkVpQlZpaVVTNW40L3VZT2RvaVJLWEJoRjh2YWxTbTJEZ0RDR3VaSXc0TGxybzlKOFlUYTdkMTJuU3dWQVFsWUtVNjhpVElXZ0JCaFhiL2J1dmF5b1E0alpzTERuRm5PWjdLNWkvQURMNmlhdmZ2QTNLa3pKelpCS0Z5YUkreC9IbEtNM0s2NUJNTVliTUhNWUlCZERDQ0FYQUNBUUV3YnpCYk1Rc3dDUVlEVlFRR0V3SlZVekVqTUNFR0ExVUVDaE1hUVdSdlltVWdVM2x6ZEdWdGN5QkpibU52Y25CdmNtRjBaV1F4SnpBbEJnTlZCQU1USGtac1lYTm9JRUZqWTJWemN5QkNiMjkwYzNSeVlYQWdWRVZUVkNCRFFRSVFDb0FmZEJZWitvS2Zvblp2VjlDcGlEQUpCZ1VyRGdNQ0dnVUFvRjB3R0FZSktvWklodmNOQVFrRE1Rc0dDU3FHU0liM0RRRUhBVEFjQmdrcWhraUc5dzBCQ1FVeER4Y05NVEF3TVRJM01EUTFOalU1V2pBakJna3Foa2lHOXcwQkNRUXhGZ1FVTDVGbkpKc0NDM2ErS1JJUzByT1I5OGFpMnc4d0RRWUpLb1pJaHZjTkFRRUJCUUFFZ1lDMmJlZHdyek9PcUZaQjc1TFM5QUx6N2RkWnNtOG85UTlMbHdMN0pSSGtuWFZOSE5pUmZOWkF2elNkSUFnNkN2NTlKbC9kcGVWclcwbDFhQ1B1RXJsZUx5WVBvYkR3Vm0rWmJJMmtPK2ZFR0d3SWdyM0huUGZaR3JXQTVwbmJxcUNhbGMvZDdOck56dnNDd21EWjlRR0FIdUt5QzV2RmlHckxGZlF3RHJISWVBPT0AAAkAAAkAAAkAAAkAAAk=</drmAdditionalHeader>
								<deliveryType>streaming</deliveryType>
								<media url="rtmp://example.com/myvideo/low"  width="640" height="480"/>
								<media url="rtmp://example.com/myvideo/medium"  width="800" height="600"/>
								<media url="rtmp://example.com/myvideo/high"  width="1920" height="1080"/>
							</manifest>;
			try
			{
				var manifest:Manifest = parser.parse(test);			
			}
			catch(error:ArgumentError)
			{
				errorSeen = true;
			}
			assertTrue(errorSeen);
		}
						
		public function testTopLevelTags():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<startTime>2009-11-29T21:53:12-08:00</startTime>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<deliveryType>streaming</deliveryType>
								<media url="rtmp://example.com/myvideo/low" bitrate="408" width="640" height="480"/>
								<media url="rtmp://example.com/myvideo/medium" bitrate="908" width="800" height="600"/>
								<media url="rtmp://example.com/myvideo/high" bitrate="1708" width="1920" height="1080"/>
							</manifest>;
			
			var manifest:Manifest = parser.parse(test);
			assertEquals(manifest.id, "myvideo");
			assertEquals(manifest.duration, 253);
			assertEquals(manifest.mimeType, "video/x-flv");		
			assertEquals(manifest.media.length, 3);
			assertEquals(manifest.streamType, "recorded");
			assertEquals(manifest.deliveryType, "streaming");
			assertEquals(1259560392000, manifest.startTime.time);
							
		}
		
		public function testMediaParser():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<bootstrapInfo profile="named" >U2FtcGxlIEJvb3RzdHJhcCAx</bootstrapInfo>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<media url="http://example.com/myvideo/low" bitrate="408" width="640" height="480" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="http://example.com/myvideo/medium" bitrate="908" width="800" height="600" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="http://example.com/myvideo/high" bitrate="1708" width="1920" height="1080" drmAdditionalHeaderId="drmMetadata2052"/>
							</manifest>
			
			var manifest:Manifest = parser.parse(test);
			
			assertEquals(3, manifest.media.length);
			assertEquals("http://example.com/myvideo/low", Media(manifest.media[0]).url);
			assertEquals("http://example.com/myvideo/medium", Media(manifest.media[1]).url);
			assertEquals("http://example.com/myvideo/high", Media(manifest.media[2]).url);
			
			assertTrue(Media(manifest.media[0]).drmAdditionalHeader != null);
			assertTrue(Media(manifest.media[1]).drmAdditionalHeader != null);
			assertTrue(Media(manifest.media[2]).drmAdditionalHeader != null);
			
			assertTrue(Media(manifest.media[0]).bootstrapInfo != null);
			assertTrue(Media(manifest.media[1]).bootstrapInfo != null);
			assertTrue(Media(manifest.media[2]).bootstrapInfo != null);
			
			assertEquals("named", Media(manifest.media[0]).bootstrapInfo.profile);
			assertEquals("named", Media(manifest.media[1]).bootstrapInfo.profile);
			assertEquals("named", Media(manifest.media[2]).bootstrapInfo.profile);
			
			assertEquals(480, Media(manifest.media[0]).height);
			assertEquals(600, Media(manifest.media[1]).height);
			assertEquals(1080, Media(manifest.media[2]).height);
			
			assertEquals(640, Media(manifest.media[0]).width);
			assertEquals(800, Media(manifest.media[1]).width);
			assertEquals(1920, Media(manifest.media[2]).width);
			
			assertEquals(408, Media(manifest.media[0]).bitrate);
			assertEquals(908, Media(manifest.media[1]).bitrate);
			assertEquals(1708, Media(manifest.media[2]).bitrate);
		}
		
		public function testResourceCreation():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<media url="http://example.com/myvideo/low.mp4" bitrate="408" width="640" height="480" drmAdditionalHeaderId="drmMetadata2052"/>
							</manifest>
			var manifest:Manifest = parser.parse(test);
			var manifestResource:StreamingURLResource = new StreamingURLResource('http://example.com/manifest.f4m');
			manifestResource.clipStartTime = 10;
			manifestResource.clipEndTime = 30;
			
			var resource:MediaResourceBase = parser.createResource(manifest, manifestResource);
			assertTrue(resource is StreamingURLResource);
			assertEquals(StreamingURLResource(resource).clipStartTime, 10);
			assertEquals(StreamingURLResource(resource).clipEndTime, 30);
			assertEquals("http://example.com/myvideo/low.mp4", StreamingURLResource(resource).url)
			assertTrue(StreamingURLResource(resource).drmContentData != null);
			
			// Make sure we don't put on an HTTPStreaming bootstrap:
			var httpMetadata:Metadata = resource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata;
			assertNull(httpMetadata);
			
			assertTrue(resource.getMetadataValue(MetadataNamespaces.DERIVED_RESOURCE_METADATA) == manifestResource);			
		}
		
		public function testResourceCreationSubClip():void
		{
			// MBR
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<media url="http://example.com/myvideo/low.mp4" bitrate="408" width="640" height="480" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="http://example.com/myvideo/med.mp4" bitrate="550" width="800" height="540" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="http://example.com/myvideo/high.mp4" bitrate="800" width="1280" height="720" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="http://example.com/myvideo/super_high.mp4" bitrate="1024" width="1920" height="1080" drmAdditionalHeaderId="drmMetadata2052"/>
							</manifest>
			var manifest:Manifest = parser.parse(test);
			var manifestResource:StreamingURLResource = new StreamingURLResource('http://example.com/manifest.f4m');
			manifestResource.clipStartTime = 50;
			manifestResource.clipEndTime = 80;
			
			var resource:MediaResourceBase = parser.createResource(manifest, manifestResource);
			
			assertTrue(resource is DynamicStreamingResource)
			assertEquals(DynamicStreamingResource(resource).clipStartTime, 50);
			assertEquals(DynamicStreamingResource(resource).clipEndTime, 80);
			
			var drmMetadata:Metadata = resource.getMetadataValue(MetadataNamespaces.DRM_METADATA) as Metadata;
			assertNotNull(drmMetadata);
			assertTrue(drmMetadata.keys.length == 2 * DynamicStreamingResource(resource).streamItems.length);
			
			assertTrue(resource.getMetadataValue(MetadataNamespaces.DERIVED_RESOURCE_METADATA) == manifestResource);
		}
		
		
		public function testDynamicResourceCreation():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="drmMetadata2052"></drmAdditionalHeader>
								<media url="rtmp://example.com/myvideo/low" bitrate="408" width="640" height="480" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="rtmp://example.com/myvideo/medium" bitrate="908" width="800" height="600" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="rtmp://example.com/myvideo/high" bitrate="1708" width="1920" height="1080" drmAdditionalHeaderId="drmMetadata2052"/>
							</manifest>
							
			var manifest:Manifest = parser.parse(test);
			var manifestResource:StreamingURLResource = new StreamingURLResource('http://example.com/manifest.f4m');
			var resource:MediaResourceBase = parser.createResource(manifest, manifestResource);
			
			assertTrue(resource is DynamicStreamingResource);
			assertEquals("low", DynamicStreamingItem(DynamicStreamingResource(resource).streamItems[0]).streamName);
			assertEquals("medium", DynamicStreamingItem(DynamicStreamingResource(resource).streamItems[1]).streamName);
			assertEquals("high", DynamicStreamingItem(DynamicStreamingResource(resource).streamItems[2]).streamName);
			
			var drmMetadata:Metadata = DynamicStreamingResource(resource).getMetadataValue(MetadataNamespaces.DRM_METADATA) as Metadata;
			assertNotNull(drmMetadata);
			var keys:Vector.<String> = drmMetadata.keys;
			assertEquals(6, keys.length);
			
			assertTrue(drmMetadata.getValue(keys[0]) != null);
			assertTrue(drmMetadata.getValue(keys[1]) != null);
			assertTrue(drmMetadata.getValue(keys[2]) != null);
			
			assertTrue(resource.getMetadataValue(MetadataNamespaces.DERIVED_RESOURCE_METADATA) == manifestResource);
		}
		
		public function testDynamicResourceCreationOutOfOrder():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<media url="rtmp://example.com/myvideo/medium" bitrate="908" width="800" height="600" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="rtmp://example.com/myvideo/high" bitrate="1708" width="1920" height="1080" drmAdditionalHeaderId="drmMetadata2052"/>
								<media url="rtmp://example.com/myvideo/low" bitrate="408" width="640" height="480" drmAdditionalHeaderId="drmMetadata2052"/>
							</manifest>
							
			var manifest:Manifest = parser.parse(test);
			var resource:MediaResourceBase = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			
			assertTrue(resource is DynamicStreamingResource);
			assertEquals("low", DynamicStreamingItem(DynamicStreamingResource(resource).streamItems[0]).streamName);
			assertEquals("medium", DynamicStreamingItem(DynamicStreamingResource(resource).streamItems[1]).streamName);
			assertEquals("high", DynamicStreamingItem(DynamicStreamingResource(resource).streamItems[2]).streamName);
		}
		
		public function testDynamicResourceIDMatchingCreation():void
		{
			//Some Sample Data == U29tZSBTYW1wbGUgRGF0YQ==
			//Some Sample Data 2 == U29tZSBTYW1wbGUgRGF0YSAy
			//Some Sample Data 3 == U29tZSBTYW1wbGUgRGF0YSAz
			
			//Sample Bootstrap 1 == U2FtcGxlIEJvb3RzdHJhcCAx
			//Sample Bootstrap 2 == U2FtcGxlIEJvb3RzdHJhcCAy
			//Sample Bootstrap 3 == U2FtcGxlIEJvb3RzdHJhcCAz
			
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<drmAdditionalHeader id="1"></drmAdditionalHeader>
								<drmAdditionalHeader id="2"></drmAdditionalHeader>
								<drmAdditionalHeader id="3">AgARfEFkZGl0aW9uYWxIZWFkZXIDAApFbmNyeXB0aW9uAwAHVmVyc2lvbgBAAAAAAAAAAAAGTWV0aG9kAgAIU3RhbmRhcmQABUZsYWdzAAAAAAAAAAAAAAZQYXJhbXMDAAdWZXJzaW9uAD/wAAAAAAAAABNFbmNyeXB0aW9uQWxnb3JpdGhtAgAHQUVTLUNCQwAQRW5jcnlwdGlvblBhcmFtcwMACUtleUxlbmd0aABAMAAAAAAAAAAACQAHS2V5SW5mbwMAB3N1YlR5cGUCAA1GbGFzaEFjY2Vzc3YyAA5GTVJNU19NRVRBREFUQQMACE1ldGFkYXRhAi/wTUlJajdnWUpLb1pJaHZjTkFRY0NvSUlqM3pDQ0k5c0NBUUV4Q3pBSkJnVXJEZ01DR2dVQU1JSVRuZ1lKS29aSWh2Y05BUWNCb0lJVGp3U0NFNHN3Z2hPSEFnRUNNSUlOQkRDQ0RRQUNBUUVDQVFFRUpFSkNNRU14UXpGR0xUbEVRVUl0TXpZME1TMUJNa00wTFRWRlJEQXlRVFF6T1RJMlFnU0NEQ1JRUkRrMFlsZDNaMlJ0Vm5sak1teDJZbW93YVUxVE5IZEphVUpzWW0xT2RscEhiSFZhZWpCcFZsWlNSMHhVWjJsSlNFNHdXVmMxYTFsWGVIWmliVlU1U1c1c2JHTjVTUzlRWjI4NFZVYzVjMkZYVGpWSlNHaDBZa2MxZWxCVFNtOWtTRkozVDJrNGRtUXpaRE5NYlVacllqSktiRXh0VG5aaVV6bDZXVEpvYkdKWFJYWk5VelIzVEROQ2EyTnRkMmxRYW5oMVkzcEZObEV5T1hWak0xSjVXVmRzZFdSRFFrUmlNalY2WkVoS2FHRlhOVEJVYlVaMFdsUXdhVkV5Um1waFIxWkZaRmhLYUdSSGJIWmlhVWxuWlVjeGMySnVUVGxKYldnd1pFaEJOa3g1T1ROa00yTjFXVmRTZGxsdFZYVlpNamwwVERKYWMxbFlUbTlaVjA1cVdsaE9la3d6V1hoSmFVSTBZbGQ0ZFdONmNIVmpla1U1U1cxb01HUklRVFpNZVRrelpETmpkVmxYVW5aWmJWVjFXVEk1ZEV3elRtcGhSMVowV1ZNNGVFeHFRWFpqUjFKNVlrTkpLMUJITlhwTlZIQlJZMjA1ZDFwWVNqQmxVMEpSWTIwNWQxcFlTakJsVlRWb1lsZFZPVWx0VG5saFdGSndXVEpHYzBscU5EaGliazE0VDJ4Q2VXSXpRbXhqYmxJMVZtMUdjMlJYVlN0a1NFb3hXbFIzZG1KdVRYaFBiRUo1WWpOQ2JHTnVValZXYlVaelpGZFZLMUJET1hWamVrVTJWVWhLZG1OSFZubGtTR3NyVUVjMWVrMVVjRkZqYlRsM1dsaEtNR1ZUUWxGamJUbDNXbGhLTUdWVk5XaGlWMVU1U1c1T2JGa3lPWFZhU0UxcFVHcDRkV042UlRaVlNFcDJZMGRXZVdSSWJGZFpWM2d4V2xRME1FMXFRVGhNTWpWNlRWUndVV050T1hkYVdFb3daVlphYUdKSVZteFFhbmQyWW01TmVFOXNRbmxpTTBKc1kyNVNOVkJxZDNaaWJrMTRUMnRPZG1KdVRqQmpiVVp3WW01UksxQkhOWHBOYW5CRVlqSTFlbVJJU21oaFZ6VXdTVVZPZG1KdVRqQmpiVVp3WW01U1QxbFhNV3hRVTBwRVlqSTFNRnBYTlRCU1NGWjVXVmhTY0dJeU5HbEpTR2gwWWtjMWVsQlRTbTlrU0ZKM1QyazRkbVF6WkROTWJVWnJZakpLYkV4dFRuWmlVemx0WWtkR2VtRkhSbXBaTWxaNlkzazVNazFUU1dkbFJ6RnpZbTVOTm1KdVRYbFFVMHB2WkVoU2QwOXBPSFprTTJRelRHMUdhMkl5U214TWJVNTJZbE01ZWxreWFHeGlWMFYyVFZNMGQwd3pRbXRqYlhkcFVHcDRkV042U1RaVlNFcDJZMGRXZVdSSWEyZFZTRXAyWTBkV2VXUkliRTlaVnpGc1VGTkthbU50YkRCaFYwNW9Za05KSzFCSE5YcE5hbkJSWTIwNWQxcFlTakJsVmxwb1lraFdiRkJ1VW5sa1YxVTRUREkxZWsxcWNGRmpiVGwzV2xoS01HVldXbWhpU0Zac1VHcDNkbUp1VFhsUGJFSjVZak5DYkdOdVVqVlFhbmgxWTNwSk5sVklTblpqUjFaNVpFaHJaMVZJU25aalIxWjVaRWhzVDFsWE1XeFFVMHA2V2xkT2RtSnRVbnBKYWpRNFltNU5lVTlzUW5saU0wSnNZMjVTTlZadFJuTmtWMVVyVDBSWk1FMUVRWGROUkVFNFRESTFlazFxY0ZGamJUbDNXbGhLTUdWV1dtaGlTRlpzVUdwM2RtSnVUWGxQYkVKNVlqTkNiR051VWpWUWFuZDJZbTVOZVU5clRuWmliazR3WTIxR2NHSnVVU3RRUnpWNlRYcHdSR0l5Tlhwa1NFcG9ZVmMxTUVsRlRuWmliazR3WTIxR2NHSnVVazlaVnpGc1VGTktRMkZYTld0V1J6bE9XVmRPYjJGWE5XeEphVUkwWWxkNGRXTjZNR2xoU0ZJd1kwUnZka3d6WkROa2VUVm9Xa2M1YVZwVE5XcGlNakIyV20xNGFHTXlhR2haTWs1c1l6Tk5kbVJxUldsSlNHaDBZa2MxZWs5dE5YcE5lakJwWVVoU01HTkViM1pNTTJRelpIazFhRnBIT1dsYVV6VnFZakl3ZG1NeVRtOWFWekZvVEhwRmRVMURPWGRhU0VwelNXbzBPR0p1VFhwUGJFSjVZak5DYkdOdVVqVkpSa0o1WWpOQ2JHTnVValZVYlVaMFdsUXdhVmt6U25Ca1IyeHFXVmQzYVZCcWVIVmplazAyVlVoS2RtTkhWbmxrU0d4WFdWZDRNVnBVTlRCamJsWnNVRU01ZFdONlRUWlZTRXAyWTBkV2VXUkliRmRaVjNneFdsUTBPRXd5TlhwTmVuQlJZMjA1ZDFwWVNqQmxWRFE0VERJMWVrMTZjRVJpTWpWNlpFaEthR0ZYTlRCUWFuaFJZako0Y0ZremJFWmlibEo1WlZRME9GVklTbkJpYlU1d1kwZEdjMGxHUW5saFZ6VnFZVmhDYUdKRk5XaGlWMVpWWlZoQ2JGQlRTbFJYVms1VlVsVXdhVkJxZUZGamJXeDFXVEpzZDFsWGVFVmlNakZvWVZjMEsxSnRlR2hqTW1oQ1dUSk9iR016VFRoTU1VSjVZVmMxYW1GWVFtaGlSVkoyWWxkR2NHSnFORGhWU0Vwd1ltMU9jR05IUm5OVWJVWjBXbFExYldKSFJucGhSMFpxV1RKV2VtTjZkM1pWU0Vwd1ltMU9jR05IUm5OVWJVWjBXbFEwT0V3eFFubGhWelZxWVZoQ2FHSkVORGhpYmswd1QyeENiR050TVhCak0wNXdZakkwWjFGWFRtcGFXRTU2VUZOS1FsUkZlRkJXZVVsblZVZFdlV0pYYkhwak1teDJZbXMxYUdKWFZUbEpiVTUyWWxNMWFGcEhPV2xhVXpWdFlrZEdlbUZIUm1wWk1sWjZZM2sxZVdGWFpHOWtTRTExWTBkNGFHVlRTV2RsUnpGelltNU5PVWx0YURCa1NFRTJUSGs1TTJRelkzVlpWMUoyV1cxVmRWa3lPWFJNTWxweldWaE9iMWxYVG1wYVdFNTZURE5aZUVscFFqUmlWM2gxWTNwd2RXTjZVVGxKYldnd1pFaEJOa3g1T1ROa00yTjFXVmRTZGxsdFZYVlpNamwwVEROT2FtRkhWblJaVXpoNFRHcEJkbU5IVW5saVEwbDJVR3A0ZFdONlZUWlZSMVo1WWxkc2VtTXliSFppYVVKQ1dUSk9iR016VFRsSmEwWk5WRVU1V0VscFFsRmFXRXAwWVZoT2VtRlhPWFZVYlVaMFdsUXdhVmt5T1hSTWJVWnJZakpLYkV4dFduTlpXRTV2V1ZkT2FscFlUbnBNYmtwd1dqSm9NR041TldoalNFSnpZVmRPYUdSSGJIWmlhMUpzV20xc2RWcFhVV2xKU0doMFlrYzFlbEJUU205a1NGSjNUMms0ZG1RelpETk1iVVpyWWpKS2JFeHRUblppVXpsdFlrZEdlbUZIUm1wWk1sWjZZM2s1TWsxVFNXZGxSekZ6WW01Tk5tSnVUVEZRVTBwdlpFaFNkMDlwT0haa00yUXpURzFHYTJJeVNteE1iVTUyWWxNNWVsa3lhR3hpVjBWMlRWTTBkMHd6UW10amJYZHBVR3A0ZFdONlZUWlJNamwxWXpOU2VWbFhiSFZrUTBKRVlqSTFlbVJJU21oaFZ6VXdWRzFHZEZwVU1HbFJXRUozWWtkc2FsbFlVbkJpTWpWUlkyMDVkMk41U1N0UVJ6VjZUbFJ3VVdOdE9YZGFXRW93WlZOQ1VXTnRPWGRhV0Vvd1pWVTFhR0pYVlRsSmJVNTVZVmhTY0ZreVJuTkphalE0WW01Tk1VOXNRbmxpTTBKc1kyNVNOVlp0Um5Oa1YxVXJaRWhLTVZwVWQzWmliazB4VDJ4Q2VXSXpRbXhqYmxJMVZtMUdjMlJYVlN0UVF6bDFZM3BWTmxWSVNuWmpSMVo1WkVocksxQkhOWHBPVkhCUlkyMDVkMXBZU2pCbFUwSlJZMjA1ZDFwWVNqQmxWVFZvWWxkVk9VbHVRbk5aV0d4cFdWZE9jbFJYT1d0YVUwa3JVRWMxZWs1VWNGRmpiVGwzV2xoS01HVldXbWhpU0Zac1VHeHNXR1ZJVFRoTU1qVjZUbFJ3VVdOdE9YZGFXRW93WlZaYWFHSklWbXhRYW5kMlltNU5NVTlzUW5saU0wSnNZMjVTTlZCcWVIVmplbFUyVlVoS2RtTkhWbmxrU0d0blZVaEtkbU5IVm5sa1NHeFBXVmN4YkZCVFNsUmlNMVoxV2tOQ2RscHBRblppYlZWbllVZEdkVnBEUW1waVIwWjNZMGRzZFZwNVNTdFFSelY2VGxSd1VXTnRPWGRhV0Vvd1pWWmFhR0pJVm14UWFrRTRUREkxZWs1VWNGRmpiVGwzV2xoS01HVldXbWhpU0Zac1VHcDNkbUp1VFRGUGJFSjVZak5DYkdOdVVqVlFhbmgxWTNwVk5sVklTblpqUjFaNVpFaHJaMVZJU25aalIxWjVaRWhzVDFsWE1XeFFVMHBVWWtkc2QyTkhWbmxsVTBrclVFYzFlazVVY0ZGamJUbDNXbGhLTUdWV1dtaGlTRlpzVUd4VmVXVklXbXBTTVZwdFZrVmtWMDFGYjNwVWJWcFRZbFZhZWxscldUVlNWMGw2V2toV1dVMUhkM2RRUXpsMVkzcFZObFZJU25aalIxWjVaRWhzVjFsWGVERmFWRFE0VERJMWVrNVVjRkZqYlRsM1dsaEtNR1ZVTkRoaWJrMHhUMnhDZVdJelFteGpibEkxU1VaQ2VXSXpRbXhqYmxJMVZHMUdkRnBVTUdsU01teG9ZbTVSYVZCcWVIVmplbFUyVlVoS2RtTkhWbmxrU0d4WFdWZDRNVnBVTlZaTk1Wb3pWMnhvUzFKWFVsbFJiWGhxWWtWS2IxbHRNVk5oUkhkMlltNU5NVTlzUW5saU0wSnNZMjVTTlZadFJuTmtWMVVyVUVNNWRXTjZWVFpWU0VwMlkwZFdlV1JJYXl0UVJ6VjZUbFJ3VVdOdE9YZGFXRW93WlZOQ1VXTnRPWGRhV0Vvd1pWVTFhR0pYVlRsSmF6VndZbTF3YUVscU5EaGliazB4VDJ4Q2VXSXpRbXhqYmxJMVZtMUdjMlJYVlN0VmFrcEhZMFp3U0ZadVZsbGxhMnh2VUVNNWRXTjZWVFpWU0VwMlkwZFdlV1JJYkZkWlYzZ3hXbFEwT0V3eU5YcE9WSEJSWTIwNWQxcFlTakJsVkRRNFRESTFlazVVY0VSaU1qVjZaRWhLYUdGWE5UQlFhbmQyWW01Tk1VOXNRbXhqYlRGd1l6Tk9jR0l5TkN0UVF6bFJZako0Y0ZremJFWmlibEo1WlZRME9Fd3hRblppUjJ4cVpWUTBTME5uUFQyZ0Nnd0lNaTR3TGpBek5UU2hDd3dKUVc1dmJubHRiM1Z6b3pJeE1EQXVEQ3BqYjIwdVlXUnZZbVV1Wm14aGMyaGhZMk5sYzNNdVlYUjBjbWxpZFhSbGN5NWhibTl1ZVcxdmRYTXhBS1ZkTVZzd0NRd0ZSVzF3ZEhreEFEQVBEQVZHY25WcGRERUdCQVJOYjIxdk1CQU1CRVpwYzJneENBUUdUV0ZuZFhKdk1CSU1CRTFsWVhReENnUUlWRzl1YTJGMGMzVXdGd3dKVm1WblpYUmhZbXhsTVFvRUNGbGhiV0VnU1cxdk1ZSUU4VENDQk8weEpnd2thSFIwY0RvdkwyWnRjekZxTURBNVpDNWpiM0p3TG1Ga2IySmxMbU52YlRvNE1Ea3dNSUlFd1RDQ0E2bWdBd0lCQWdJUUpNbEs3Q2Z0U1JYSjdGbGJHeFFRdHpBTkJna3Foa2lHOXcwQkFRc0ZBREJiTVFzd0NRWURWUVFHRXdKVlV6RWpNQ0VHQTFVRUNoTWFRV1J2WW1VZ1UzbHpkR1Z0Y3lCSmJtTnZjbkJ2Y21GMFpXUXhKekFsQmdOVkJBTVRIa1pzWVhOb0lFRmpZMlZ6Y3lCQ2IyOTBjM1J5WVhBZ1ZFVlRWQ0JEUVRBZUZ3MHdPVEE1TWprd01EQXdNREJhRncweE1UQTVNamt5TXpVNU5UbGFNSUdMTVFzd0NRWURWUVFHRXdKVlV6RXdNQzRHQTFVRUNoUW5RMjl0Y0dGdWVVNWhiV1V0VkhKaGJuTndiM0owTFZCeWIyUXRNakF3T1RBNU1qa3dNRFUzTVEwd0N3WURWUVFMRkFSRVpYQjBNUkl3RUFZRFZRUUxGQWxVY21GdWMzQnZjblF4SnpBbEJnTlZCQU1USGtOdmJYQmhibmxPWVcxbExWUnlZVzV6Y0c5eWRDMVFjbTlrTFRJd01EQ0JuekFOQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUE3VVM1dE5jUDNkaHZJTC9CREdzMlhMV1ZiNDBkZjA4R0tXd1U0WWlxVElFdXNraUxPdXZNYnNrWXBHRmJNS21EV2lFMU9Ia3MwQnJuVFlIYXRVcWRsb3dCc1FSYmd4ZXp2b3RGMmZ5Vlg1Y0FsTjdHQzh6cjN6ZlZCdFVZZW1KVGgwVDk4bkhCLzN2R2hYM3AySTkvSFJvUHZXMUkwVEQrMnd3cjk2YUNhTTBDQXdFQUFhT0NBZEl3Z2dIT01HNEdBMVVkSHdSbk1HVXdZNkJob0YrR1hXaDBkSEE2THk5d2FXeHZkRzl1YzJsMFpXTnliQzUyWlhKcGMybG5iaTVqYjIwdlFXUnZZbVZUZVhOMFpXMXpTVzVqYjNKd2IzSmhkR1ZrVWsxVFEzVnpkRzl0WlhKQ2IyOTBjM1J5WVhBdlRHRjBaWE4wUTFKTUxtTnliREFMQmdOVkhROEVCQU1DQkxBd2dlUUdBMVVkSUFTQjNEQ0IyVENCMWdZS0tvWklodmN2QXdrQUFUQ0J4ekF5QmdnckJnRUZCUWNDQVJZbWFIUjBjRG92TDNkM2R5NWhaRzlpWlM1amIyMHZaMjh2Wm14aGMyaGhZMk5sYzNOZlkzQXdnWkFHQ0NzR0FRVUZCd0lDTUlHREdvR0FWR2hwY3lCalpYSjBhV1pwWTJGMFpTQm9ZWE1nWW1WbGJpQnBjM04xWldRZ2FXNGdZV05qYjNKa1lXNWpaU0IzYVhSb0lIUm9aU0JCWkc5aVpTQkdiR0Z6YUNCQlkyTmxjM01nUTFCVElHeHZZMkYwWldRZ1lYUWdhSFIwY0RvdkwzZDNkeTVoWkc5aVpTNWpiMjB2WjI4dlpteGhjMmhoWTJObGMzTmZZM0F3SHdZRFZSMGpCQmd3Rm9BVW9PWUorcHN0T09TV0w5ei8wZE8rNW1neG9oRXdIUVlEVlIwT0JCWUVGRHpZaDB1Vktxb1kxTjMrenNwaG92cUVLazNiTUJVR0ExVWRKUVFPTUF3R0NpcUdTSWIzTHdNSkFUY3dFUVlLS29aSWh2Y3ZBd2tDQlFRREFnRUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFGSVhmZGY0M1kzRDRuaUZTMnl1RER4cWJHRlphR0hEZFB0ak5GS1cwQy8wSmV5M3ZFKzMwaDdCRUZXU1BtTUphL09mQ2trSE52ZjBic1YvTDZ1QmxkQUhzb2Rmdi9FOGtKUld3cVM0bHEvR0N6VnBKMHR3RklINUd1NFM0aVFjWS9nNCtHblhpUkxFQXJQREc4Vi94blZjUVErOWV1NVkxQ09hOHZzTDdKK0FZWEdDRkIyQWtvQlZFTDVTOEtuQTJQUWVRakpQTmJQWjNCQ2Y1bDFGR2NveFlid0Nnc1IzcENZWTdtYlhESmp0RFZ2MXZJelp4OUFyOGZwZ01PKzNsZGo2MS9kNnVaVTdHd0piNFRxZWxNRm92MjNtTTF3MWVRTU4rQlNaWDZhYkxoMmNPdGhNWG1ZeW1VcVhHVG53NWMySGRkYTkyNWNRajFPNEMvMkpFa01JSDBCQWxaV0Zwb1pFZEdlUUFZRHpJd01UQXdNVEkzTURRMU5qVTVXZ1NCZ0lQTEpWYlZwTlR0VmNVbXlLdDM0UlU5ZkdEWG9SbGJGYm5JRFpUaTJMSDNONG11VnE0b1JIMC9udkN3UVVWdk9ETmtZdVRlb0orZk4vaDRTLzhHbHZVN2JXR2xOKzQ2c3N3M3F3VEorZXE1SDFXcFcxQXlML2ViNlQ2Y0ZjaktZTjFsdUhrM1pvUXBtTWVkS24rK2VkMFNLQlE5dFNNU2dWNXlRNTkycW5Jdk1DRUdDU3FHU0liM0x3TUlBZ1FVcEVKSWszOUw4NWR2cGd0VTJtcFpKY0E0Zy91Z0NBUUdZWFpoZEdGeW9TWU1KR2gwZEhBNkx5OW1iWE14YWpBd09XUXVZMjl5Y0M1aFpHOWlaUzVqYjIwNk9EQTVNREJ2TUZzeEN6QUpCZ05WQkFZVEFsVlRNU013SVFZRFZRUUtFeHBCWkc5aVpTQlRlWE4wWlcxeklFbHVZMjl5Y0c5eVlYUmxaREVuTUNVR0ExVUVBeE1lUm14aGMyZ2dRV05qWlhOeklFSnZiM1J6ZEhKaGNDQlVSVk5VSUVOQkFoQUtnQjkwRmhuNmdwK2lkbTlYMEttSW9CME1Hekl1TUM0eU1ERXdNREV5TnpBME5UWTFPWHBmVWtWTVJVRlRSYUNDRHEwd2dnU2pNSUlEaTZBREFnRUNBaEFLZ0I5MEZobjZncCtpZG05WDBLbUlNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Gc3hDekFKQmdOVkJBWVRBbFZUTVNNd0lRWURWUVFLRXhwQlpHOWlaU0JUZVhOMFpXMXpJRWx1WTI5eWNHOXlZWFJsWkRFbk1DVUdBMVVFQXhNZVJteGhjMmdnUVdOalpYTnpJRUp2YjNSemRISmhjQ0JVUlZOVUlFTkJNQjRYRFRBNU1Ea3lPVEF3TURBd01Gb1hEVEV4TURreU9USXpOVGsxT1Zvd2JqRUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlZCQW9VQzBOdmJYQmhibmxPWVcxbE1RMHdDd1lEVlFRTEZBUkVaWEIwTVJFd0R3WURWUVFMRkFoUVlXTnJZV2RsY2pFbk1DVUdBMVVFQXhNZVEyOXRjR0Z1ZVU1aGJXVXRVR0ZqYTJGblpYSXRVSEp2WkMweU1EQTVNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUFBNEdOQURDQmlRS0JnUUR0WTZwdUV3RlZvMTRORVhid0RYSWhkVUFJVjdKMUFPaUo0QTNReTB4aWlUenA3MHplL290SUo3aGtaWlFWcU8yK0tNVG5STUNlUmVPUFMzclB0TjJ4Rmh6VWk3Q2w5cnBBSU91S0JoU29BaXZhSVgrUXRXYmliV24zT0dxK2tGYk9YNHRtOHVTU0pHbGxFS1ZhcnBPeDVxdnJXSDZwb3pJQUlRWTBXL2VTd1FJREFRQUJvNElCMGpDQ0FjNHdiZ1lEVlIwZkJHY3daVEJqb0dHZ1g0WmRhSFIwY0RvdkwzQnBiRzkwYjI1emFYUmxZM0pzTG5abGNtbHphV2R1TG1OdmJTOUJaRzlpWlZONWMzUmxiWE5KYm1OdmNuQnZjbUYwWldSU1RWTkRkWE4wYjIxbGNrSnZiM1J6ZEhKaGNDOU1ZWFJsYzNSRFVrd3VZM0pzTUFzR0ExVWREd1FFQXdJRXNEQ0I1QVlEVlIwZ0JJSGNNSUhaTUlIV0Jnb3Foa2lHOXk4RENRQUJNSUhITURJR0NDc0dBUVVGQndJQkZpWm9kSFJ3T2k4dmQzZDNMbUZrYjJKbExtTnZiUzluYnk5bWJHRnphR0ZqWTJWemMxOWpjRENCa0FZSUt3WUJCUVVIQWdJd2dZTWFnWUJVYUdseklHTmxjblJwWm1sallYUmxJR2hoY3lCaVpXVnVJR2x6YzNWbFpDQnBiaUJoWTJOdmNtUmhibU5sSUhkcGRHZ2dkR2hsSUVGa2IySmxJRVpzWVhOb0lFRmpZMlZ6Y3lCRFVGTWdiRzlqWVhSbFpDQmhkQ0JvZEhSd09pOHZkM2QzTG1Ga2IySmxMbU52YlM5bmJ5OW1iR0Z6YUdGalkyVnpjMTlqY0RBZkJnTlZIU01FR0RBV2dCU2c1Z242bXkwNDVKWXYzUC9SMDc3bWFER2lFVEFkQmdOVkhRNEVGZ1FVWThRNjlVVzgrTlhPY3dMc2wrelpQWEYrQTVvd0ZRWURWUjBsQkE0d0RBWUtLb1pJaHZjdkF3a0JOakFSQmdvcWhraUc5eThEQ1FJRkJBTUNBUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJ4UFV6c2pBZ0dVb1VlRnBQUUNpOG1QYTlBMmZnenlDRTZ4VWVNU2h4eDhUVFRSTzNUV0cvc1ZtTmRxKzZnVFh2SGFkR2NvNW9UYlFiaXdFV0doTWZzZzY2YytWRkdZRzlIeG5mcXAvaExyRXN0cENOeVEvYWVjRHNxYkJCb3VJWlN0ZndZOG9wQ28zZjQ3ODdJOFFNVVNLalpsSGFVMzVvMDA1L0gwOURTZkM1dTJ1ZzVnMjBUbnFFZmpJRUFtaklXRSszOTJQNzNsYVl2Y2tGU0xqOXU0dytUMUZTVmg4T3BHRlhnbzhKWHFsWlg1Z2pjRCtoVXJsOE5kbDdMUHd3STJhRFRHeFhRMktHRWZlMmpRYklmcS9rQmorcjZTYWdyall3ZXN4V1lUbnV0Yi8vN2JrQS9JT2FUaHVZVE5ZbG1aZXREbUk2cTVtbU9GaldjaXE4VXdnZ1R0TUlJRDFhQURBZ0VDQWhCNDFGTlZSR2prblk2NWhrdjFJYm91TUEwR0NTcUdTSWIzRFFFQkN3VUFNRll4Q3pBSkJnTlZCQVlUQWxWVE1TTXdJUVlEVlFRS0V4cEJaRzlpWlNCVGVYTjBaVzF6SUVsdVkyOXljRzl5WVhSbFpERWlNQ0FHQTFVRUF4TVpSbXhoYzJnZ1FXTmpaWE56SUZSRlUxUWdVbTl2ZENCRFFUQWVGdzB3T1RBMk16QXdNREF3TURCYUZ3MHlPVEEyTWpreU16VTVOVGxhTUY0eEN6QUpCZ05WQkFZVEFsVlRNU013SVFZRFZRUUtFeHBCWkc5aVpTQlRlWE4wWlcxeklFbHVZMjl5Y0c5eVlYUmxaREVxTUNnR0ExVUVBeE1oUm14aGMyZ2dRV05qWlhOeklGUkZVMVFnU1c1MFpYSnRaV1JwWVhSbElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTZsYVQ5RHBkb1NqQ0gzRHpuMjAyOEl1Q3NYRUdhUkpWOWNIQ2Rqa21VempRRFhoU1g4UGYyYkNxQnRzMmlOSncyRDQzQXUzdHVNZW5tbHRCdXhMNnpHRlA4SFdJcFVGNDUrU240NVpHZWhnOVE5VnV2WXp2MlMyVjZlQ05oYVpPalZjVEhFMW1zVndERkp5aGNTbTFTR2gwMDluWFhURGtKbi9WUURJNFBmRUgzcmwrdmNObHB1RmZaaGRxc1pGNkxHMWF3ci93TG9NRWMwbGpnQWJTQjltcjVvT1pmZWVkUTBIMnZjZ29URzdLcVRrejNocVEyb0xuN25Bc09yc2NQVnhZWStGd21SY3M4MVk0dzhNbEJ3Q09WelhNVTYwRERISzRFNTJDUEdCNHUxdDYrZzAvaHF1NVF2cmZ1TlEzUDhSNUM2SG9FN0EzWTdxUlZ6bzltUUlEQVFBQm80SUJyVENDQWFrd0VnWURWUjBUQVFIL0JBZ3dCZ0VCL3dJQkFUQmNCZ05WSFI4RVZUQlRNRkdnVDZCTmhrdG9kSFJ3T2k4dmNHbHNiM1J2Ym5OcGRHVmpjbXd1ZG1WeWFYTnBaMjR1WTI5dEwwOW1abXhwYm1WRFFTOUJaRzlpWlVac1lYTm9RV05qWlhOelZFVlRWRkp2YjNSRFFTNWpjbXd3SFFZRFZSME9CQllFRkVOckRPalprUVltYndUVlJCSXFaRmpBa0p0VE1COEdBMVVkSXdRWU1CYUFGQTlwQXVybkpvRnJraHVUZWEzWTYvTDdCcGdkTUE0R0ExVWREd0VCL3dRRUF3SUJCakNCNUFZRFZSMGdCSUhjTUlIWk1JSFdCZ29xaGtpRzl5OERDUUFCTUlISE1ESUdDQ3NHQVFVRkJ3SUJGaVpvZEhSd09pOHZkM2QzTG1Ga2IySmxMbU52YlM5bmJ5OW1iR0Z6YUdGalkyVnpjMTlqY0RDQmtBWUlLd1lCQlFVSEFnSXdnWU1hZ1lCVWFHbHpJR05sY25ScFptbGpZWFJsSUdoaGN5QmlaV1Z1SUdsemMzVmxaQ0JwYmlCaFkyTnZjbVJoYm1ObElIZHBkR2dnZEdobElFRmtiMkpsSUVac1lYTm9JRUZqWTJWemN5QkRVRk1nYkc5allYUmxaQ0JoZENCb2RIUndPaTh2ZDNkM0xtRmtiMkpsTG1OdmJTOW5ieTltYkdGemFHRmpZMlZ6YzE5amNEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFqWXNMUExTRXlEQlVXQ3Z0SS9MYnJ5aUs1S1JYUEJuZ0dWZFd3cUJpZ2ZFNm5kZDdhOVd4T0xidEtoWXFEQUNzSVEvN282N29OY1dxNEM5dGJCRHFlOFdLN1lrWXQ0cnhMOUt3Vm0vZ1M4S3BzaWt3blNnZG5KeTNrUlJ6SlMyUWxVL3Zla1lUYncxcUkzbCtGTk1aenFQd2ZLMVhXeVBIZk5lYUlCNWs5cTdHUkRnbWZpcXZyS0drT1JEZEg2QlZXK0FyZDRZeHJza2pvQ2FIY295L2lmMWRsN1NnS2hRbmJmTkVrblFEUlJBR0gvRFRKOTYxYVd2bUtjQlZWMlp5aU1UcjdKcWt4WnBnMmFQa01BOTl0c2hjT2xpOUhKNDdNdis3RGhJazJVT1BGU3Z1aXBUV2xYcDhZbFNiSml3a21yclJ1QlRsNlI4U2dBZU84Vk5EWHpDQ0JSRXdnZ1A1b0FNQ0FRSUNFR2dmbm5hV2laNW1TczdUNkRVektWZ3dEUVlKS29aSWh2Y05BUUVMQlFBd1hqRUxNQWtHQTFVRUJoTUNWVk14SXpBaEJnTlZCQW9UR2tGa2IySmxJRk41YzNSbGJYTWdTVzVqYjNKd2IzSmhkR1ZrTVNvd0tBWURWUVFERXlGR2JHRnphQ0JCWTJObGMzTWdWRVZUVkNCSmJuUmxjbTFsWkdsaGRHVWdRMEV3SGhjTk1Ea3dOak13TURBd01EQXdXaGNOTWpRd05qSTRNak0xT1RVNVdqQmJNUXN3Q1FZRFZRUUdFd0pWVXpFak1DRUdBMVVFQ2hNYVFXUnZZbVVnVTNsemRHVnRjeUJKYm1OdmNuQnZjbUYwWldReEp6QWxCZ05WQkFNVEhrWnNZWE5vSUVGalkyVnpjeUJDYjI5MGMzUnlZWEFnVkVWVFZDQkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMdzRNcHlCYjdyalFOVXg0Q1lWWXZQd3FwYm9jU1l0VmQ0VExsK1A5VGE2RkFkSldMbkwvWGRaTjV1Y2NOWU1GSmUzUCtTWS9ZcnlBUmZMdk9VMTloUUJ4Zzc1UEVkTkFlNGx3TFk4L2hLWVMxcGZwZmZvUDNEdVkyYWtGdVdZT3gwOTE2aDNPcFZqNmdrZmNEeU15d21mVzlnaHhUb09VRDJTM3d0NldXNnB3S2VmVlBlblZGUFNOTzdPOWVCRGFKK3N6aVpXSjVyaWlTQkU2SGErZmtKOHFjUGFCNGNSWHk2K09MMmloRDF4RUh3RHExelIwM3RtenZ6cVNFYXVMdEZUVGE1QXFJcGY5YldPMk1oVWRJM2NaT3F3bzlzOC9zNXZZaDFKMWhHc3c0RWsrL1hiVkJ6MGRNQ2ZxWlJycmpkeXVGeVlMa1VKWHlwYnZ5RFVidzBDQXdFQUFhT0NBY3d3Z2dISU1HUUdBMVVkSHdSZE1Gc3dXYUJYb0ZXR1UyaDBkSEE2THk5d2FXeHZkRzl1YzJsMFpXTnliQzUyWlhKcGMybG5iaTVqYjIwdlQyWm1iR2x1WlVOQkwwRmtiMkpsUm14aGMyaEJZMk5sYzNOVVJWTlVTVzUwWlhKdFpXUnBZWFJsUTBFdVkzSnNNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUUF3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlNnNWduNm15MDQ1Sll2M1AvUjA3N21hREdpRVRBZkJnTlZIU01FR0RBV2dCUkRhd3pvMlpFR0ptOEUxVVFTS21SWXdKQ2JVekFWQmdOVkhTVUVEakFNQmdvcWhraUc5eThEQ1FFQ01JSGtCZ05WSFNBRWdkd3dnZGt3Z2RZR0NpcUdTSWIzTHdNSkFBRXdnY2N3TWdZSUt3WUJCUVVIQWdFV0ptaDBkSEE2THk5M2QzY3VZV1J2WW1VdVkyOXRMMmR2TDJac1lYTm9ZV05qWlhOelgyTndNSUdRQmdnckJnRUZCUWNDQWpDQmd4cUJnRlJvYVhNZ1kyVnlkR2xtYVdOaGRHVWdhR0Z6SUdKbFpXNGdhWE56ZFdWa0lHbHVJR0ZqWTI5eVpHRnVZMlVnZDJsMGFDQjBhR1VnUVdSdlltVWdSbXhoYzJnZ1FXTmpaWE56SUVOUVV5QnNiMk5oZEdWa0lHRjBJR2gwZEhBNkx5OTNkM2N1WVdSdlltVXVZMjl0TDJkdkwyWnNZWE5vWVdOalpYTnpYMk53TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDbHowM3VPdG1DV2lhYXdUOXh3MDlad21SSDdXZEdiRjFndGhveGJwK2M0SjVPWDJ0KzVxWHpCK0EvblBxbHBsMGxNNEZLM3VzT01CU0hjYjRtYlJWOFNPSWgzUFdnN1p0U2ZwMGQ3UjlpQVZIM3ZhaVYwOUNSd2pVQVV0ekJxVk1jY2VyV3dKTDRVTm5sTHAxQTVIT3ZZcWxNREpiQXM0bjVuTjFWZUlsQ1k4bEZpNTVhUXlwamVtUXVrdmdWKzRIa1N6OTF0VkVpQlZpaVVTNW40L3VZT2RvaVJLWEJoRjh2YWxTbTJEZ0RDR3VaSXc0TGxybzlKOFlUYTdkMTJuU3dWQVFsWUtVNjhpVElXZ0JCaFhiL2J1dmF5b1E0alpzTERuRm5PWjdLNWkvQURMNmlhdmZ2QTNLa3pKelpCS0Z5YUkreC9IbEtNM0s2NUJNTVliTUhNWUlCZERDQ0FYQUNBUUV3YnpCYk1Rc3dDUVlEVlFRR0V3SlZVekVqTUNFR0ExVUVDaE1hUVdSdlltVWdVM2x6ZEdWdGN5QkpibU52Y25CdmNtRjBaV1F4SnpBbEJnTlZCQU1USGtac1lYTm9JRUZqWTJWemN5QkNiMjkwYzNSeVlYQWdWRVZUVkNCRFFRSVFDb0FmZEJZWitvS2Zvblp2VjlDcGlEQUpCZ1VyRGdNQ0dnVUFvRjB3R0FZSktvWklodmNOQVFrRE1Rc0dDU3FHU0liM0RRRUhBVEFjQmdrcWhraUc5dzBCQ1FVeER4Y05NVEF3TVRJM01EUTFOalU1V2pBakJna3Foa2lHOXcwQkNRUXhGZ1FVTDVGbkpKc0NDM2ErS1JJUzByT1I5OGFpMnc4d0RRWUpLb1pJaHZjTkFRRUJCUUFFZ1lDMmJlZHdyek9PcUZaQjc1TFM5QUx6N2RkWnNtOG85UTlMbHdMN0pSSGtuWFZOSE5pUmZOWkF2elNkSUFnNkN2NTlKbC9kcGVWclcwbDFhQ1B1RXJsZUx5WVBvYkR3Vm0rWmJJMmtPK2ZFR0d3SWdyM0huUGZaR3JXQTVwbmJxcUNhbGMvZDdOck56dnNDd21EWjlRR0FIdUt5QzV2RmlHckxGZlF3RHJISWVBPT0AAAkAAAkAAAkAAAkAAAk=</drmAdditionalHeader>
								<bootstrapInfo profile="named" id='1'>U2FtcGxlIEJvb3RzdHJhcCAx==</bootstrapInfo>
								<bootstrapInfo profile="named" id='2'>U2FtcGxlIEJvb3RzdHJhcCAy==</bootstrapInfo>
								<bootstrapInfo profile="named" id='3'>U2FtcGxlIEJvb3RzdHJhcCAz==</bootstrapInfo>
								<media url="http://example.com/myvideo/low"  bitrate="408" width="640" height="480" drmAdditionalHeaderId='1'/>
								<media url="http://example.com/myvideo/medium" bitrate="908" width="800" height="600" drmAdditionalHeaderId='2'/>
								<media url="http://example.com/myvideo/high" bitrate="1708" width="1920" height="1080" drmAdditionalHeaderId='3'/>
							</manifest>
							
			var manifest:Manifest = parser.parse(test);
			var resource:MediaResourceBase = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			
			assertTrue(resource is DynamicStreamingResource);

			var drmMetadata:Metadata = DynamicStreamingResource(resource).getMetadataValue(MetadataNamespaces.DRM_METADATA) as Metadata;
			assertNotNull(drmMetadata);
			var keys:Vector.<String> = drmMetadata.keys;
			assertEquals(6, keys.length);

			assertTrue(drmMetadata.getValue(keys[0]) != null);
			assertTrue(drmMetadata.getValue(keys[1]) != null);
			assertTrue(drmMetadata.getValue(keys[2]) != null);
		}
		
		public function testBaseURL():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
							<id>myvideo</id>
							<duration>253</duration>
							<mimeType>video/x-flv</mimeType>
							<streamType>recorded</streamType>
							<baseURL>rtmp://newbase.com/myserver</baseURL>
							<media url="rtmp://example.com/myvideo/low"  bitrate="408" width="640" height="480" />
							<media url="rtmp://example.com/myvideo/medium" bitrate="908" width="800" height="600" />
							<media url="rtmp://example.com/myvideo/high" bitrate="1708" width="1920" height="1080" />
						</manifest>
							
			var manifest:Manifest = parser.parse(test);
			var resource:MediaResourceBase = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			
			var dynResource:DynamicStreamingResource = resource as DynamicStreamingResource;
			
			assertEquals(dynResource.streamItems.length, 3);
			
			assertEquals(dynResource.host, "rtmp://newbase.com/myserver");
			
			assertEquals(dynResource.streamItems[0].streamName, "low");
			assertEquals(dynResource.streamItems[1].streamName, "medium");
			assertEquals(dynResource.streamItems[2].streamName, "high");			
		}
		
		public function testRelativeURL():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
							<id>myvideo</id>
							<duration>253</duration>
							<mimeType>video/x-flv</mimeType>
							<streamType>recorded</streamType>
							<bootstrapInfo profile="named" id='1' url='foo'/>
							<media url="myvideo/low.flv"  bitrate="408" width="640" height="480" bootstrapInfoId='1'/>
						</manifest>
							
			var manifest:Manifest = parser.parse(test);
			var resource:MediaResourceBase = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			
			assertTrue(resource is URLResource);
			
			var urlResource:URLResource = resource as URLResource;
				
			assertEquals(urlResource.url, "http://example.com/myvideo/low.flv");
			CONFIG::FLASH_10_1
			{
				var httpMetadata:Metadata = urlResource.getMetadataValue(MetadataNamespaces.HTTP_STREAMING_METADATA) as Metadata;
				assertTrue(httpMetadata != null);
				var bootstrapInfo:BootstrapInfo = httpMetadata.getValue(MetadataNamespaces.HTTP_STREAMING_BOOTSTRAP_KEY) as BootstrapInfo;
				assertTrue(bootstrapInfo != null);
				assertTrue(bootstrapInfo.url == "http://example.com/foo");
				assertTrue(bootstrapInfo.profile == "named");
				assertTrue(bootstrapInfo.id == "1");
			}
		}
		
		public function testNoURLDynStreaming():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
							<id>myvideo</id>
							<duration>253</duration>
							<mimeType>video/x-flv</mimeType>
							<streamType>recorded</streamType>
							<media url="low"  bitrate="408" width="640" height="480" />
							<media url="medium" bitrate="908" width="800" height="600" />
							<media url="high" bitrate="1708" width="1920" height="1080" />
						</manifest>
							
			var manifest:Manifest = parser.parse(test);
			var errorSeen:Boolean = false;
			var resource:MediaResourceBase;
			try
			{
				resource = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			}
			catch(error:Error)
			{
				errorSeen = true;
			}			
			assertFalse(errorSeen);
			
			// With no URL, the stream items should be prefixed by the location of the manifest.
			assertTrue(resource != null);
			var dynResource:DynamicStreamingResource = resource as DynamicStreamingResource;
			assertTrue(dynResource);
			assertTrue(dynResource.streamItems.length == 3);
			assertEquals(dynResource.streamItems[0].streamName, "low");
			assertEquals(dynResource.streamItems[1].streamName, "medium");
			assertEquals(dynResource.streamItems[2].streamName, "high");
			assertEquals(dynResource.host, "http://example.com");
		}
		
		public function testDVRInfo():void
		{					
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<media url="low"  bitrate="408" width="640" height="480" />
								<media url="medium" bitrate="908" width="800" height="600" />
								<media url="high" bitrate="1708" width="1920" height="1080" />
								<dvrInfo url="http://example.com/testInfo.xml"
										id="testInfo"
										beginOffset="20"
										endOffset="300"
										offline="false"/>
							</manifest>;
			var manifest:Manifest = parser.parse(test);
			var errorSeen:Boolean = false;
			var resource:MediaResourceBase;
			try
			{
				resource = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			}
			catch(error:Error)
			{
				errorSeen = true;
			}			
			assertFalse(errorSeen);
			
			// With no URL, the stream items should be prefixed by the location of the manifest.
			assertTrue(resource != null);
			var dynResource:DynamicStreamingResource = resource as DynamicStreamingResource;
			assertNotNull(manifest.dvrInfo);
			assertEquals("testInfo", manifest.dvrInfo.id);
			assertEquals("http://example.com/testInfo.xml", manifest.dvrInfo.url);
			assertEquals(20, manifest.dvrInfo.beginOffset);
			assertEquals(300, manifest.dvrInfo.endOffset);
			assertEquals(false, manifest.dvrInfo.offline);			
		}
		
		public function testDVRInfoFailure():void
		{
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
											<id>myvideo</id>
											<duration>253</duration>
											<mimeType>video/x-flv</mimeType>
											<streamType>recorded</streamType>
											<media url="low"  bitrate="408" width="640" height="480" />
											<media url="medium" bitrate="908" width="800" height="600" />
											<media url="high" bitrate="1708" width="1920" height="1080" />
											<dvrInfo url="GarbageURL"
													id="testInfo"
													beginOffset="-1"
													endOffset="NaN"
													offline="blah"/>
										</manifest>;
			var manifest:Manifest = parser.parse(test);
			var errorSeen:Boolean = false;
			var resource:MediaResourceBase;
			try
			{
				resource = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			}
			catch(error:Error)
			{
				errorSeen = true;
			}			
			assertFalse(errorSeen);
			
			// With no URL, the stream items should be prefixed by the location of the manifest.
			assertTrue(resource != null);
			var dynResource:DynamicStreamingResource = resource as DynamicStreamingResource;
			assertNotNull(manifest.dvrInfo);
			assertEquals("testInfo", manifest.dvrInfo.id);
			assertEquals("null/GarbageURL", manifest.dvrInfo.url);
			assertEquals(0, manifest.dvrInfo.beginOffset);
			assertEquals(0, manifest.dvrInfo.endOffset);
			assertEquals(false, manifest.dvrInfo.offline);			
					
		}
		
		public function testXMPMoovParsing():void
		{
			var encoder:Base64Encoder = new Base64Encoder();
			var testMoov:String = "testMoov";
			var testXMPMetadata:String = "testXMP";
			
			encoder.encode(testMoov);
			var moovEncoded:String = encoder.drain();
			
			encoder.encode(testXMPMetadata);
			var xmpEncoded:String = encoder.drain();
						
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
											<id>myvideo</id>
											<duration>253</duration>
											<mimeType>video/x-flv</mimeType>
											<streamType>recorded</streamType>
											<media url="low"  bitrate="408" width="640" height="480" >
												<xmpMetadata>
													{xmpEncoded}
												</xmpMetadata>	
												<moov>
													{moovEncoded}
												</moov>
											</media>
										</manifest>;
			var manifest:Manifest = parser.parse(test);
						
			assertEquals(manifest.media[0].moov.toString(),  testMoov);
			assertEquals(manifest.media[0].xmp.toString(),  testXMPMetadata);
				
		}
		
		public function testMetadata():void
		{
			var metadata:String = "AgAKb25NZXRhRGF0YQgAAAAAAAhkdXJhdGlvbgBAalzXuQCuwwAFd2lkdGgAQIqgAAAAAAAABmhlaWdodABAfgAAAAAAAAAMdmlkZW9jb2RlY2lkAgAEYXZjMQAMYXVkaW9jb2RlY2lkAgAEbXA0YQAKYXZjcHJvZmlsZQBAWQAAAAAAAAAIYXZjbGV2ZWwAQD8AAAAAAAAABmFhY2FvdAAAAAAAAAAAAAAOdmlkZW9mcmFtZXJhdGUAQDgAAAAAAAAAD2F1ZGlvc2FtcGxlcmF0ZQBA53AAAAAAAAANYXVkaW9jaGFubmVscwBAAAAAAAAAAAAJdHJhY2tpbmZvCgAAAAIDAAZsZW5ndGgAQVNOYgAAAAAACXRpbWVzY2FsZQBA13AAAAAAAAAIbGFuZ3VhZ2UCAANlbmcAAAkDAAZsZW5ndGgAQWNPAAAAAAAACXRpbWVzY2FsZQBA53AAAAAAAAAIbGFuZ3VhZ2UCAANlbmcAAAkAAAk=";
			
			var test:XML = <manifest xmlns="http://ns.adobe.com/f4m/1.0">
								<id>myvideo</id>
								<duration>253</duration>
								<mimeType>video/x-flv</mimeType>
								<streamType>recorded</streamType>
								<media url="low"  bitrate="408" width="640" height="480" >
									<metadata>
										{metadata}
									</metadata>						
								</media>
							</manifest>;
			var manifest:Manifest = parser.parse(test);
						
			var decoder:mx.utils.Base64Decoder = new mx.utils.Base64Decoder();
			decoder.decode(metadata);
			
			var data:ByteArray = decoder.drain();
			data.position = 0;
			data.objectEncoding = 0;
			
			var header:String = data.readObject() as String;
			var metaInfo:Object = data.readObject();
						
			assertEquals(manifest.media.length, 1);
			
			for ( var key:Object in manifest.media[0].metadata)
			{
				if (manifest.media[0].metadata[key] is String ||
					manifest.media[0].metadata[key] is Number )
				{
					assertEquals(manifest.media[0].metadata[key] , metaInfo[key]);
				}
			}
						
			var errorSeen:Boolean = false;
			var resource:MediaResourceBase;
			try
			{
				resource = parser.createResource(manifest, new URLResource('http://example.com/manifest.f4m'));
			}
			catch(error:Error)
			{
				errorSeen = true;
			}			
			assertFalse(errorSeen);
			
			// With no URL, the stream items should be prefixed by the location of the manifest.
			assertTrue(resource != null);
						
		}
		
		public function testFM956():void
		{
			var test:XML = 
				<manifest xmlns="http://ns.adobe.com/f4m/1.0"> 
					<id>Stream with instance name</id> 
					<baseURL>rtmp://llnwqa.fcod.llnwd.net/a1218/o18/_definst_/</baseURL> 
					<urlIncludesFMSApplicationInstance>true</urlIncludesFMSApplicationInstance>
					<media url="mp4:lexsamplecontent/king_500.f4v" width="480" height="270"/> 
				</manifest>; 
			var manifest:Manifest = parser.parse(test);
			assertTrue(manifest.urlIncludesFMSApplicationInstance);

			test = 
				<manifest xmlns="http://ns.adobe.com/f4m/1.0"> 
					<id>Stream with instance name</id> 
					<baseURL>rtmp://llnwqa.fcod.llnwd.net/a1218/o18/_definst_/</baseURL> 
					<urlIncludesFMSApplicationInstance>false</urlIncludesFMSApplicationInstance>
					<media url="mp4:lexsamplecontent/king_500.f4v" width="480" height="270"/> 
				</manifest>; 
			manifest = parser.parse(test);
			assertTrue(!manifest.urlIncludesFMSApplicationInstance);

			test = 
				<manifest xmlns="http://ns.adobe.com/f4m/1.0"> 
					<id>Stream with instance name</id> 
					<baseURL>rtmp://llnwqa.fcod.llnwd.net/a1218/o18/_definst_/</baseURL> 
					<media url="mp4:lexsamplecontent/king_500.f4v" width="480" height="270"/> 
				</manifest>; 
			manifest = parser.parse(test);
			assertTrue(!manifest.urlIncludesFMSApplicationInstance);
		}
		
		public function testFM992():void
		{
			var factory:MediaFactory = new DefaultMediaFactory();
			var parser:ManifestParser = new ManifestParser();
			var test:XML = 
				<manifest xmlns="http://ns.adobe.com/f4m/1.0">
				  <id>Multicast_Fusion</id>
				  <duration>0</duration>
				  <media url="rtmfp://weiz-xp1/multicast" groupspec="G:010121055e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8010c170e6f72672e6f736d662e6e65742e6d756c746963617374210e61b67506b6a5f02187ca24fe590388778040fa3a9c23589c58baadd097c12657011b00070ae00000fe814b" multicastStreamName="fusionstream1"/>
				</manifest>
				
			var manifest:Manifest = parser.parse(test);
			assertTrue(manifest.streamType == StreamType.LIVE);
		}
		
		public function testFM1032():void
		{
			var parser:ManifestParser = new ManifestParser();
			var test:XML = 
				<manifest xmlns="http://ns.adobe.com/f4m/1.0">
				  <id>Multicast_Fusion</id>
				  <duration>0</duration>
				  <media url="rtmfp://weiz-xp1/multicast" multicastStreamName="fusionstream1"/>
				</manifest>
				
			try
			{
				parser.parse(test);
				assertTrue(false);
			}
			catch(parseError:Error)
			{
				// expected
			}

			test = 
				<manifest xmlns="http://ns.adobe.com/f4m/1.0">
				  <id>Multicast_Fusion</id>
				  <duration>0</duration>
				  <media url="rtmfp://weiz-xp1/multicast" groupspec="G:010121055e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8010c170e6f72672e6f736d662e6e65742e6d756c746963617374210e61b67506b6a5f02187ca24fe590388778040fa3a9c23589c58baadd097c12657011b00070ae00000fe814b"/>
				</manifest>
				
			try
			{
				parser.parse(test);
				assertTrue(false);
			}
			catch(parseError:Error)
			{
				// expected
			}
		}				
	}
}