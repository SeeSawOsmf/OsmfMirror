/*****************************************************
*  
*  Copyright 2009 Adobe Systems Incorporated.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Adobe Systems Incorporated.
*  Portions created by Adobe Systems Incorporated are Copyright (C) 2009 Adobe Systems 
*  Incorporated. All Rights Reserved. 
* 
*  Contributor(s): Akamai Technologies
*  
*****************************************************/
package org.openvideoplayer.netmocker
{
	import flash.net.NetConnection;
	import flash.net.NetStream;
	
	import org.openvideoplayer.net.NetClient;
	import org.openvideoplayer.net.NetLoader;
	import org.openvideoplayer.traits.ILoadable;
	
	/**
	 * A NetLoader which replaces the NetConnection and NetStream with mock
	 * objects which don't hit the network.
	 **/
	public class MockNetLoader extends NetLoader
	{
		/**
		 * Constructor
		 * 
		 * @param allowConnectionSharing true if the NetLoader can invoke a NetConnectionFactory which
		 * re-uses (shares) an existing NetConnection. 
		 * @param netConnectionFactory the netConneciton factory instance to be used
		 * @param mockNetNegotiator the mock NetNegotiator to be used
		 */
		public function MockNetLoader(allowConnectionSharing:Boolean=true,netConnectionFactory:DefaultNetConnectionFactory= null,mockNetNegotiator:MockNetNegotiator = null)
		{
			if (netConnectionFactory == null)
			{
				negotiator = new MockNetNegotiator();
				netConnectionFactory = new DefaultNetConnectionFactory(negotiator);
			}
			else
			{
				negotiator = mockNetNegotiator;
			}
			
			super(allowConnectionSharing, netConnectionFactory);
		}

		/**
		 * The client's expectation for how this loader's NetConnection will
		 * behave after connect() is called.
		 **/ 
		public function set netConnectionExpectation(value:NetConnectionExpectation):void
		{
			negotiator.netConnectionExpectation = value;
		}
		
		public function get netConnectionExpectation():NetConnectionExpectation
		{
			return negotiator.netConnectionExpectation;
		}
		
		/**
		 * The expected duration of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected duration will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedDuration(value:Number):void
		{
			_netStreamExpectedDuration = value;
		}
		
		public function get netStreamExpectedDuration():Number
		{
			return _netStreamExpectedDuration;
		}

		/**
		 * The expected width of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected width will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedWidth(value:Number):void
		{
			_netStreamExpectedWidth = value;
		}
		
		public function get netStreamExpectedWidth():Number
		{
			return _netStreamExpectedWidth;
		}

		/**
		 * The expected height of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected height will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedHeight(value:Number):void
		{
			_netStreamExpectedHeight = value;
		}
		
		public function get netStreamExpectedHeight():Number
		{
			return _netStreamExpectedHeight;
		}
		
		/**
		 * An Array of EventInfos representing any events that are expected to
		 *  be dispatched when the mock NetStream's position crosses a certain
		 * threshold.  Note that these events are above and beyond what the
		 * MockNetStream typically dispatches during playback.
		 **/
		public function set netStreamExpectedEvents(value:Array):void
		{
			_netStreamExpectedEvents = value;
		}
		
		public function get netStreamExpectedEvents():Array
		{
			return _netStreamExpectedEvents;
		}
			    
	    /**
	     * @inheritDoc
	     **/
	    override protected function createNetStream(connection:NetConnection, loadable:ILoadable):NetStream
	    {
			var mockNetStream:MockNetStream = new MockNetStream(connection);
			mockNetStream.client = new NetClient();
			mockNetStream.expectedDuration = _netStreamExpectedDuration;
			mockNetStream.expectedWidth = _netStreamExpectedWidth;
			mockNetStream.expectedHeight = _netStreamExpectedHeight;
			mockNetStream.expectedEvents = _netStreamExpectedEvents;
			return mockNetStream;
	    }
	    
	    private var _netStreamExpectedDuration:Number = 0;
	    private var _netStreamExpectedWidth:Number = 0;
	    private var _netStreamExpectedHeight:Number = 0;
	    private var _netStreamExpectedEvents:Array = [];

		private var negotiator:MockNetNegotiator;   
	}
}