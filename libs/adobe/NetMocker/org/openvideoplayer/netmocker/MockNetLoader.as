/*****************************************************
*  
*  Copyright 2009 Adobe Systems Incorporated.  All Rights Reserved.
*  
*****************************************************
*  The contents of this file are subject to the Mozilla Public License
*  Version 1.1 (the "License"); you may not use this file except in
*  compliance with the License. You may obtain a copy of the License at
*  http://www.mozilla.org/MPL/
*   
*  Software distributed under the License is distributed on an "AS IS"
*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
*  License for the specific language governing rights and limitations
*  under the License.
*   
*  
*  The Initial Developer of the Original Code is Adobe Systems Incorporated.
*  Portions created by Adobe Systems Incorporated are Copyright (C) 2009 Adobe Systems 
*  Incorporated. All Rights Reserved. 
* 
*  Contributor(s): Akamai Technologies
*  
*****************************************************/

package org.openvideoplayer.netmocker
{
	import __AS3__.vec.Vector;
	import flash.events.NetStatusEvent;
	import flash.net.NetConnection;
	import flash.net.NetStream;
	
	import org.openvideoplayer.net.NetClient;
	import org.openvideoplayer.utils.URL;
	import org.openvideoplayer.net.NetConnectionAttempt;
	
	/**
	 * A NetLoader which replaces the NetConnection and NetStream with mock
	 * objects which don't hit the network.
	 **/
	public class MockNetLoader extends TracingNetLoader
	{
		/**
		 * The client's expectation for how this loader's NetConnection will
		 * behave after connect() is called.
		 **/ 
		public function set netConnectionExpectation(value:NetConnectionExpectation):void
		{
			if (value != _netConnectionExpectation && value != null)
			{
				_netConnectionExpectation = value;
				
				if (mockNetConnection)
				{
					
					mockNetConnection.expectation = value;
				}
			}
		}
		
		public function get netConnectionExpectation():NetConnectionExpectation
		{
			return _netConnectionExpectation;
		}
		
		/**
		 * The expected duration of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected duration will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedDuration(value:Number):void
		{
			_netStreamExpectedDuration = value;
		}
		
		public function get netStreamExpectedDuration():Number
		{
			return _netStreamExpectedDuration;
		}

		/**
		 * The expected width of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected width will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedWidth(value:Number):void
		{
			_netStreamExpectedWidth = value;
		}
		
		public function get netStreamExpectedWidth():Number
		{
			return _netStreamExpectedWidth;
		}

		/**
		 * The expected height of any mock NetStreams generated by this
		 * loader.
		 * 
		 * The expected height will be returned in the onMetaData client
		 * callback.
		 **/
		public function set netStreamExpectedHeight(value:Number):void
		{
			_netStreamExpectedHeight = value;
		}
		
		public function get netStreamExpectedHeight():Number
		{
			return _netStreamExpectedHeight;
		}
		
		/**
		 * Wrapper to expose the protected buildPortProtocolSequence method.
		 **/
		public function testBuildPortProtocolSequence(url:URL):Vector.<NetConnectionAttempt>
		{
			return buildPortProtocolSequence(url);
		}
		
		/**
		 * Wrapper to expose the protected buildConnectionAddress method.
		 **/
		public function testBuildConnectionAddress(url:URL, protocol:String, port:String):String
		{
			return buildConnectionAddress(url,protocol,port);
		}
		
	    /**
	     * @inheritDoc
	     **/
	    override protected function createNetConnection():NetConnection
	    {
			mockNetConnection = new MockNetConnection();
			if (netConnectionExpectation != null) {
				mockNetConnection.expectation = netConnectionExpectation;
			}
			//mockNetConnection.addEventListener(NetStatusEvent.NET_STATUS, onNetConnectionNetStatusEvent);
			return mockNetConnection;
	    }
	    
	    /**
	     * @inheritDoc
	     **/
	    override protected function createNetStream(connection:NetConnection):NetStream
	    {
			mockNetStream = new MockNetStream(connection);
			mockNetStream.client = new NetClient();
			mockNetStream.expectedDuration = _netStreamExpectedDuration;
			mockNetStream.expectedWidth = _netStreamExpectedWidth;
			mockNetStream.expectedHeight = _netStreamExpectedHeight;
			//mockNetStream.addEventListener(NetStatusEvent.NET_STATUS, onNetStreamNetStatusEvent);
			return mockNetStream;
	    }
	    
	    private var mockNetConnection:MockNetConnection = null;
	    private var _netConnectionExpectation:NetConnectionExpectation = NetConnectionExpectation.VALID_CONNECTION;
	    private var _netStreamExpectedDuration:Number = 0;
	    private var _netStreamExpectedWidth:Number = 0;
	    private var _netStreamExpectedHeight:Number = 0;
	    
	    private var mockNetStream:MockNetStream = null;
	}
}